
f103bme280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003584  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003690  08003690  00013690  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080036b8  080036b8  000136b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080036c0  080036c0  000136c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080036c4  080036c4  000136c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080036c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002c8  2000000c  080036d4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002d4  080036d4  000202d4  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001b4e2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003596  00000000  00000000  0003b517  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009949  00000000  00000000  0003eaad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b68  00000000  00000000  000483f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001078  00000000  00000000  00048f60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007d4d  00000000  00000000  00049fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000041ee  00000000  00000000  00051d25  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00055f13  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002398  00000000  00000000  00055f90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003678 	.word	0x08003678

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003678 	.word	0x08003678

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_ldivmod>:
 80006f4:	b97b      	cbnz	r3, 8000716 <__aeabi_ldivmod+0x22>
 80006f6:	b972      	cbnz	r2, 8000716 <__aeabi_ldivmod+0x22>
 80006f8:	2900      	cmp	r1, #0
 80006fa:	bfbe      	ittt	lt
 80006fc:	2000      	movlt	r0, #0
 80006fe:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000702:	e006      	blt.n	8000712 <__aeabi_ldivmod+0x1e>
 8000704:	bf08      	it	eq
 8000706:	2800      	cmpeq	r0, #0
 8000708:	bf1c      	itt	ne
 800070a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800070e:	f04f 30ff 	movne.w	r0, #4294967295
 8000712:	f000 b9ad 	b.w	8000a70 <__aeabi_idiv0>
 8000716:	f1ad 0c08 	sub.w	ip, sp, #8
 800071a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800071e:	2900      	cmp	r1, #0
 8000720:	db09      	blt.n	8000736 <__aeabi_ldivmod+0x42>
 8000722:	2b00      	cmp	r3, #0
 8000724:	db1a      	blt.n	800075c <__aeabi_ldivmod+0x68>
 8000726:	f000 f835 	bl	8000794 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4770      	bx	lr
 8000736:	4240      	negs	r0, r0
 8000738:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073c:	2b00      	cmp	r3, #0
 800073e:	db1b      	blt.n	8000778 <__aeabi_ldivmod+0x84>
 8000740:	f000 f828 	bl	8000794 <__udivmoddi4>
 8000744:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074c:	b004      	add	sp, #16
 800074e:	4240      	negs	r0, r0
 8000750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000754:	4252      	negs	r2, r2
 8000756:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800075a:	4770      	bx	lr
 800075c:	4252      	negs	r2, r2
 800075e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000762:	f000 f817 	bl	8000794 <__udivmoddi4>
 8000766:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800076e:	b004      	add	sp, #16
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	4770      	bx	lr
 8000778:	4252      	negs	r2, r2
 800077a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800077e:	f000 f809 	bl	8000794 <__udivmoddi4>
 8000782:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800078a:	b004      	add	sp, #16
 800078c:	4252      	negs	r2, r2
 800078e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000792:	4770      	bx	lr

08000794 <__udivmoddi4>:
 8000794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000798:	468c      	mov	ip, r1
 800079a:	460e      	mov	r6, r1
 800079c:	4604      	mov	r4, r0
 800079e:	9d08      	ldr	r5, [sp, #32]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d150      	bne.n	8000846 <__udivmoddi4+0xb2>
 80007a4:	428a      	cmp	r2, r1
 80007a6:	4617      	mov	r7, r2
 80007a8:	d96c      	bls.n	8000884 <__udivmoddi4+0xf0>
 80007aa:	fab2 fe82 	clz	lr, r2
 80007ae:	f1be 0f00 	cmp.w	lr, #0
 80007b2:	d00b      	beq.n	80007cc <__udivmoddi4+0x38>
 80007b4:	f1ce 0c20 	rsb	ip, lr, #32
 80007b8:	fa01 f60e 	lsl.w	r6, r1, lr
 80007bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80007c4:	ea4c 0c06 	orr.w	ip, ip, r6
 80007c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80007cc:	0c3a      	lsrs	r2, r7, #16
 80007ce:	fbbc f9f2 	udiv	r9, ip, r2
 80007d2:	b2bb      	uxth	r3, r7
 80007d4:	fb02 cc19 	mls	ip, r2, r9, ip
 80007d8:	fb09 fa03 	mul.w	sl, r9, r3
 80007dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80007e0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80007e4:	45b2      	cmp	sl, r6
 80007e6:	d90a      	bls.n	80007fe <__udivmoddi4+0x6a>
 80007e8:	19f6      	adds	r6, r6, r7
 80007ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80007ee:	f080 8125 	bcs.w	8000a3c <__udivmoddi4+0x2a8>
 80007f2:	45b2      	cmp	sl, r6
 80007f4:	f240 8122 	bls.w	8000a3c <__udivmoddi4+0x2a8>
 80007f8:	f1a9 0902 	sub.w	r9, r9, #2
 80007fc:	443e      	add	r6, r7
 80007fe:	eba6 060a 	sub.w	r6, r6, sl
 8000802:	fbb6 f0f2 	udiv	r0, r6, r2
 8000806:	fb02 6610 	mls	r6, r2, r0, r6
 800080a:	fb00 f303 	mul.w	r3, r0, r3
 800080e:	b2a4      	uxth	r4, r4
 8000810:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000814:	42a3      	cmp	r3, r4
 8000816:	d909      	bls.n	800082c <__udivmoddi4+0x98>
 8000818:	19e4      	adds	r4, r4, r7
 800081a:	f100 32ff 	add.w	r2, r0, #4294967295
 800081e:	f080 810b 	bcs.w	8000a38 <__udivmoddi4+0x2a4>
 8000822:	42a3      	cmp	r3, r4
 8000824:	f240 8108 	bls.w	8000a38 <__udivmoddi4+0x2a4>
 8000828:	3802      	subs	r0, #2
 800082a:	443c      	add	r4, r7
 800082c:	2100      	movs	r1, #0
 800082e:	1ae4      	subs	r4, r4, r3
 8000830:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000834:	2d00      	cmp	r5, #0
 8000836:	d062      	beq.n	80008fe <__udivmoddi4+0x16a>
 8000838:	2300      	movs	r3, #0
 800083a:	fa24 f40e 	lsr.w	r4, r4, lr
 800083e:	602c      	str	r4, [r5, #0]
 8000840:	606b      	str	r3, [r5, #4]
 8000842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000846:	428b      	cmp	r3, r1
 8000848:	d907      	bls.n	800085a <__udivmoddi4+0xc6>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d055      	beq.n	80008fa <__udivmoddi4+0x166>
 800084e:	2100      	movs	r1, #0
 8000850:	e885 0041 	stmia.w	r5, {r0, r6}
 8000854:	4608      	mov	r0, r1
 8000856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800085a:	fab3 f183 	clz	r1, r3
 800085e:	2900      	cmp	r1, #0
 8000860:	f040 808f 	bne.w	8000982 <__udivmoddi4+0x1ee>
 8000864:	42b3      	cmp	r3, r6
 8000866:	d302      	bcc.n	800086e <__udivmoddi4+0xda>
 8000868:	4282      	cmp	r2, r0
 800086a:	f200 80fc 	bhi.w	8000a66 <__udivmoddi4+0x2d2>
 800086e:	1a84      	subs	r4, r0, r2
 8000870:	eb66 0603 	sbc.w	r6, r6, r3
 8000874:	2001      	movs	r0, #1
 8000876:	46b4      	mov	ip, r6
 8000878:	2d00      	cmp	r5, #0
 800087a:	d040      	beq.n	80008fe <__udivmoddi4+0x16a>
 800087c:	e885 1010 	stmia.w	r5, {r4, ip}
 8000880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000884:	b912      	cbnz	r2, 800088c <__udivmoddi4+0xf8>
 8000886:	2701      	movs	r7, #1
 8000888:	fbb7 f7f2 	udiv	r7, r7, r2
 800088c:	fab7 fe87 	clz	lr, r7
 8000890:	f1be 0f00 	cmp.w	lr, #0
 8000894:	d135      	bne.n	8000902 <__udivmoddi4+0x16e>
 8000896:	2101      	movs	r1, #1
 8000898:	1bf6      	subs	r6, r6, r7
 800089a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800089e:	fa1f f887 	uxth.w	r8, r7
 80008a2:	fbb6 f2fc 	udiv	r2, r6, ip
 80008a6:	fb0c 6612 	mls	r6, ip, r2, r6
 80008aa:	fb08 f002 	mul.w	r0, r8, r2
 80008ae:	0c23      	lsrs	r3, r4, #16
 80008b0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80008b4:	42b0      	cmp	r0, r6
 80008b6:	d907      	bls.n	80008c8 <__udivmoddi4+0x134>
 80008b8:	19f6      	adds	r6, r6, r7
 80008ba:	f102 33ff 	add.w	r3, r2, #4294967295
 80008be:	d202      	bcs.n	80008c6 <__udivmoddi4+0x132>
 80008c0:	42b0      	cmp	r0, r6
 80008c2:	f200 80d2 	bhi.w	8000a6a <__udivmoddi4+0x2d6>
 80008c6:	461a      	mov	r2, r3
 80008c8:	1a36      	subs	r6, r6, r0
 80008ca:	fbb6 f0fc 	udiv	r0, r6, ip
 80008ce:	fb0c 6610 	mls	r6, ip, r0, r6
 80008d2:	fb08 f800 	mul.w	r8, r8, r0
 80008d6:	b2a3      	uxth	r3, r4
 80008d8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80008dc:	45a0      	cmp	r8, r4
 80008de:	d907      	bls.n	80008f0 <__udivmoddi4+0x15c>
 80008e0:	19e4      	adds	r4, r4, r7
 80008e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x15a>
 80008e8:	45a0      	cmp	r8, r4
 80008ea:	f200 80b9 	bhi.w	8000a60 <__udivmoddi4+0x2cc>
 80008ee:	4618      	mov	r0, r3
 80008f0:	eba4 0408 	sub.w	r4, r4, r8
 80008f4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80008f8:	e79c      	b.n	8000834 <__udivmoddi4+0xa0>
 80008fa:	4629      	mov	r1, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	fa07 f70e 	lsl.w	r7, r7, lr
 8000906:	f1ce 0320 	rsb	r3, lr, #32
 800090a:	fa26 f203 	lsr.w	r2, r6, r3
 800090e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000912:	fbb2 f1fc 	udiv	r1, r2, ip
 8000916:	fa1f f887 	uxth.w	r8, r7
 800091a:	fb0c 2211 	mls	r2, ip, r1, r2
 800091e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000922:	fa20 f303 	lsr.w	r3, r0, r3
 8000926:	fb01 f908 	mul.w	r9, r1, r8
 800092a:	4333      	orrs	r3, r6
 800092c:	0c1e      	lsrs	r6, r3, #16
 800092e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000932:	45b1      	cmp	r9, r6
 8000934:	fa00 f40e 	lsl.w	r4, r0, lr
 8000938:	d909      	bls.n	800094e <__udivmoddi4+0x1ba>
 800093a:	19f6      	adds	r6, r6, r7
 800093c:	f101 32ff 	add.w	r2, r1, #4294967295
 8000940:	f080 808c 	bcs.w	8000a5c <__udivmoddi4+0x2c8>
 8000944:	45b1      	cmp	r9, r6
 8000946:	f240 8089 	bls.w	8000a5c <__udivmoddi4+0x2c8>
 800094a:	3902      	subs	r1, #2
 800094c:	443e      	add	r6, r7
 800094e:	eba6 0609 	sub.w	r6, r6, r9
 8000952:	fbb6 f0fc 	udiv	r0, r6, ip
 8000956:	fb0c 6210 	mls	r2, ip, r0, r6
 800095a:	fb00 f908 	mul.w	r9, r0, r8
 800095e:	b29e      	uxth	r6, r3
 8000960:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000964:	45b1      	cmp	r9, r6
 8000966:	d907      	bls.n	8000978 <__udivmoddi4+0x1e4>
 8000968:	19f6      	adds	r6, r6, r7
 800096a:	f100 33ff 	add.w	r3, r0, #4294967295
 800096e:	d271      	bcs.n	8000a54 <__udivmoddi4+0x2c0>
 8000970:	45b1      	cmp	r9, r6
 8000972:	d96f      	bls.n	8000a54 <__udivmoddi4+0x2c0>
 8000974:	3802      	subs	r0, #2
 8000976:	443e      	add	r6, r7
 8000978:	eba6 0609 	sub.w	r6, r6, r9
 800097c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000980:	e78f      	b.n	80008a2 <__udivmoddi4+0x10e>
 8000982:	f1c1 0720 	rsb	r7, r1, #32
 8000986:	fa22 f807 	lsr.w	r8, r2, r7
 800098a:	408b      	lsls	r3, r1
 800098c:	ea48 0303 	orr.w	r3, r8, r3
 8000990:	fa26 f407 	lsr.w	r4, r6, r7
 8000994:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000998:	fbb4 f9fe 	udiv	r9, r4, lr
 800099c:	fa1f fc83 	uxth.w	ip, r3
 80009a0:	fb0e 4419 	mls	r4, lr, r9, r4
 80009a4:	408e      	lsls	r6, r1
 80009a6:	fa20 f807 	lsr.w	r8, r0, r7
 80009aa:	fb09 fa0c 	mul.w	sl, r9, ip
 80009ae:	ea48 0806 	orr.w	r8, r8, r6
 80009b2:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80009b6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80009ba:	45a2      	cmp	sl, r4
 80009bc:	fa02 f201 	lsl.w	r2, r2, r1
 80009c0:	fa00 f601 	lsl.w	r6, r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x244>
 80009c6:	18e4      	adds	r4, r4, r3
 80009c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80009cc:	d244      	bcs.n	8000a58 <__udivmoddi4+0x2c4>
 80009ce:	45a2      	cmp	sl, r4
 80009d0:	d942      	bls.n	8000a58 <__udivmoddi4+0x2c4>
 80009d2:	f1a9 0902 	sub.w	r9, r9, #2
 80009d6:	441c      	add	r4, r3
 80009d8:	eba4 040a 	sub.w	r4, r4, sl
 80009dc:	fbb4 f0fe 	udiv	r0, r4, lr
 80009e0:	fb0e 4410 	mls	r4, lr, r0, r4
 80009e4:	fb00 fc0c 	mul.w	ip, r0, ip
 80009e8:	fa1f f888 	uxth.w	r8, r8
 80009ec:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80009f0:	45a4      	cmp	ip, r4
 80009f2:	d907      	bls.n	8000a04 <__udivmoddi4+0x270>
 80009f4:	18e4      	adds	r4, r4, r3
 80009f6:	f100 3eff 	add.w	lr, r0, #4294967295
 80009fa:	d229      	bcs.n	8000a50 <__udivmoddi4+0x2bc>
 80009fc:	45a4      	cmp	ip, r4
 80009fe:	d927      	bls.n	8000a50 <__udivmoddi4+0x2bc>
 8000a00:	3802      	subs	r0, #2
 8000a02:	441c      	add	r4, r3
 8000a04:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a08:	fba0 8902 	umull	r8, r9, r0, r2
 8000a0c:	eba4 0c0c 	sub.w	ip, r4, ip
 8000a10:	45cc      	cmp	ip, r9
 8000a12:	46c2      	mov	sl, r8
 8000a14:	46ce      	mov	lr, r9
 8000a16:	d315      	bcc.n	8000a44 <__udivmoddi4+0x2b0>
 8000a18:	d012      	beq.n	8000a40 <__udivmoddi4+0x2ac>
 8000a1a:	b155      	cbz	r5, 8000a32 <__udivmoddi4+0x29e>
 8000a1c:	ebb6 030a 	subs.w	r3, r6, sl
 8000a20:	eb6c 060e 	sbc.w	r6, ip, lr
 8000a24:	fa06 f707 	lsl.w	r7, r6, r7
 8000a28:	40cb      	lsrs	r3, r1
 8000a2a:	431f      	orrs	r7, r3
 8000a2c:	40ce      	lsrs	r6, r1
 8000a2e:	602f      	str	r7, [r5, #0]
 8000a30:	606e      	str	r6, [r5, #4]
 8000a32:	2100      	movs	r1, #0
 8000a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a38:	4610      	mov	r0, r2
 8000a3a:	e6f7      	b.n	800082c <__udivmoddi4+0x98>
 8000a3c:	4689      	mov	r9, r1
 8000a3e:	e6de      	b.n	80007fe <__udivmoddi4+0x6a>
 8000a40:	4546      	cmp	r6, r8
 8000a42:	d2ea      	bcs.n	8000a1a <__udivmoddi4+0x286>
 8000a44:	ebb8 0a02 	subs.w	sl, r8, r2
 8000a48:	eb69 0e03 	sbc.w	lr, r9, r3
 8000a4c:	3801      	subs	r0, #1
 8000a4e:	e7e4      	b.n	8000a1a <__udivmoddi4+0x286>
 8000a50:	4670      	mov	r0, lr
 8000a52:	e7d7      	b.n	8000a04 <__udivmoddi4+0x270>
 8000a54:	4618      	mov	r0, r3
 8000a56:	e78f      	b.n	8000978 <__udivmoddi4+0x1e4>
 8000a58:	4681      	mov	r9, r0
 8000a5a:	e7bd      	b.n	80009d8 <__udivmoddi4+0x244>
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	e776      	b.n	800094e <__udivmoddi4+0x1ba>
 8000a60:	3802      	subs	r0, #2
 8000a62:	443c      	add	r4, r7
 8000a64:	e744      	b.n	80008f0 <__udivmoddi4+0x15c>
 8000a66:	4608      	mov	r0, r1
 8000a68:	e706      	b.n	8000878 <__udivmoddi4+0xe4>
 8000a6a:	3a02      	subs	r2, #2
 8000a6c:	443e      	add	r6, r7
 8000a6e:	e72b      	b.n	80008c8 <__udivmoddi4+0x134>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_InitTick+0x3c>)
{
 8000a78:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7a:	7818      	ldrb	r0, [r3, #0]
 8000a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a80:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <HAL_InitTick+0x40>)
 8000a86:	6810      	ldr	r0, [r2, #0]
 8000a88:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a8c:	f000 f89e 	bl	8000bcc <HAL_SYSTICK_Config>
 8000a90:	4604      	mov	r4, r0
 8000a92:	b958      	cbnz	r0, 8000aac <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a94:	2d0f      	cmp	r5, #15
 8000a96:	d809      	bhi.n	8000aac <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a98:	4602      	mov	r2, r0
 8000a9a:	4629      	mov	r1, r5
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	f000 f854 	bl	8000b4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <HAL_InitTick+0x44>)
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	601d      	str	r5, [r3, #0]
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aae:	bd38      	pop	{r3, r4, r5, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	20000008 	.word	0x20000008
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x20>)
{
 8000abe:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac2:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aca:	f000 f82d 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff ffd0 	bl	8000a74 <HAL_InitTick>
  HAL_MspInit();
 8000ad4:	f002 fc7c 	bl	80033d0 <HAL_MspInit>
}
 8000ad8:	2000      	movs	r0, #0
 8000ada:	bd08      	pop	{r3, pc}
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ae0:	4a03      	ldr	r2, [pc, #12]	; (8000af0 <HAL_IncTick+0x10>)
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_IncTick+0x14>)
 8000ae4:	6811      	ldr	r1, [r2, #0]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	440b      	add	r3, r1
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000028 	.word	0x20000028
 8000af4:	20000000 	.word	0x20000000

08000af8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000af8:	4b01      	ldr	r3, [pc, #4]	; (8000b00 <HAL_GetTick+0x8>)
 8000afa:	6818      	ldr	r0, [r3, #0]
}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000028 	.word	0x20000028

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b08:	f7ff fff6 	bl	8000af8 <HAL_GetTick>
 8000b0c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b0e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b10:	bf1e      	ittt	ne
 8000b12:	4b04      	ldrne	r3, [pc, #16]	; (8000b24 <HAL_Delay+0x20>)
 8000b14:	781b      	ldrbne	r3, [r3, #0]
 8000b16:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b18:	f7ff ffee 	bl	8000af8 <HAL_GetTick>
 8000b1c:	1b40      	subs	r0, r0, r5
 8000b1e:	4284      	cmp	r4, r0
 8000b20:	d8fa      	bhi.n	8000b18 <HAL_Delay+0x14>
  {
  }
}
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	20000000 	.word	0x20000000

08000b28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b2a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b2e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b36:	041b      	lsls	r3, r3, #16
 8000b38:	0c1b      	lsrs	r3, r3, #16
 8000b3a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b42:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b44:	60d3      	str	r3, [r2, #12]
 8000b46:	4770      	bx	lr
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4e:	b530      	push	{r4, r5, lr}
 8000b50:	68dc      	ldr	r4, [r3, #12]
 8000b52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b56:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5c:	2b04      	cmp	r3, #4
 8000b5e:	bf28      	it	cs
 8000b60:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b62:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b68:	bf98      	it	ls
 8000b6a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b70:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b74:	bf88      	it	hi
 8000b76:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4019      	ands	r1, r3
 8000b7a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b80:	3c01      	subs	r4, #1
 8000b82:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b84:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b86:	ea42 0201 	orr.w	r2, r2, r1
 8000b8a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	bfaf      	iteee	ge
 8000b90:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	4b06      	ldrlt	r3, [pc, #24]	; (8000bb0 <HAL_NVIC_SetPriority+0x64>)
 8000b96:	f000 000f 	andlt.w	r0, r0, #15
 8000b9a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	bfa5      	ittet	ge
 8000b9e:	b2d2      	uxtbge	r2, r2
 8000ba0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000baa:	bd30      	pop	{r4, r5, pc}
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	e000ed14 	.word	0xe000ed14

08000bb4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	0942      	lsrs	r2, r0, #5
 8000bb8:	f000 001f 	and.w	r0, r0, #31
 8000bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8000bc0:	4b01      	ldr	r3, [pc, #4]	; (8000bc8 <HAL_NVIC_EnableIRQ+0x14>)
 8000bc2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bcc:	3801      	subs	r0, #1
 8000bce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bd2:	d20a      	bcs.n	8000bea <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bda:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e010 	.word	0xe000e010
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bf8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bfa:	b330      	cbz	r0, 8000c4a <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bfc:	2214      	movs	r2, #20
 8000bfe:	6801      	ldr	r1, [r0, #0]
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_DMA_Init+0x58>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c02:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c04:	440b      	add	r3, r1
 8000c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8000c10:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8000c12:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000c14:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c16:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 8000c1a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c1e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c22:	4323      	orrs	r3, r4
 8000c24:	6904      	ldr	r4, [r0, #16]
 8000c26:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c28:	6944      	ldr	r4, [r0, #20]
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	6984      	ldr	r4, [r0, #24]
 8000c2e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c30:	69c4      	ldr	r4, [r0, #28]
 8000c32:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000c34:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c36:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c38:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c3a:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c3c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c40:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c42:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c4a:	2001      	movs	r0, #1
}
 8000c4c:	bd10      	pop	{r4, pc}
 8000c4e:	bf00      	nop
 8000c50:	bffdfff8 	.word	0xbffdfff8
 8000c54:	40020000 	.word	0x40020000

08000c58 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000c5c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d003      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c62:	2304      	movs	r3, #4
 8000c64:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c66:	2001      	movs	r0, #1
 8000c68:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c6a:	6803      	ldr	r3, [r0, #0]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	f022 020e 	bic.w	r2, r2, #14
 8000c72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f022 0201 	bic.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c7c:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <HAL_DMA_Abort_IT+0x88>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d01f      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x6a>
 8000c82:	3214      	adds	r2, #20
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d01e      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0x6e>
 8000c88:	3214      	adds	r2, #20
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01d      	beq.n	8000cca <HAL_DMA_Abort_IT+0x72>
 8000c8e:	3214      	adds	r2, #20
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d01d      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x78>
 8000c94:	3214      	adds	r2, #20
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d01d      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x7e>
 8000c9a:	3214      	adds	r2, #20
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	bf0c      	ite	eq
 8000ca0:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000ca4:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	; (8000ce4 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000caa:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cac:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000cb6:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000cba:	b17b      	cbz	r3, 8000cdc <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000cbc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e7f0      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x50>
 8000cc6:	2310      	movs	r3, #16
 8000cc8:	e7ee      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x50>
 8000cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cce:	e7eb      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x50>
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	e7e8      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x50>
 8000cd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cda:	e7e5      	b.n	8000ca8 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000cdc:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000cde:	bd10      	pop	{r4, pc}
 8000ce0:	40020008 	.word	0x40020008
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cea:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cec:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cee:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cf0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000cf2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cf4:	4095      	lsls	r5, r2
 8000cf6:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000cf8:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000cfa:	d032      	beq.n	8000d62 <HAL_DMA_IRQHandler+0x7a>
 8000cfc:	074d      	lsls	r5, r1, #29
 8000cfe:	d530      	bpl.n	8000d62 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d04:	bf5e      	ittt	pl
 8000d06:	681a      	ldrpl	r2, [r3, #0]
 8000d08:	f022 0204 	bicpl.w	r2, r2, #4
 8000d0c:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d0e:	4a3e      	ldr	r2, [pc, #248]	; (8000e08 <HAL_DMA_IRQHandler+0x120>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d019      	beq.n	8000d48 <HAL_DMA_IRQHandler+0x60>
 8000d14:	3214      	adds	r2, #20
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d018      	beq.n	8000d4c <HAL_DMA_IRQHandler+0x64>
 8000d1a:	3214      	adds	r2, #20
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d017      	beq.n	8000d50 <HAL_DMA_IRQHandler+0x68>
 8000d20:	3214      	adds	r2, #20
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d017      	beq.n	8000d56 <HAL_DMA_IRQHandler+0x6e>
 8000d26:	3214      	adds	r2, #20
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d017      	beq.n	8000d5c <HAL_DMA_IRQHandler+0x74>
 8000d2c:	3214      	adds	r2, #20
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	bf0c      	ite	eq
 8000d32:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000d36:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000d3a:	4a34      	ldr	r2, [pc, #208]	; (8000e0c <HAL_DMA_IRQHandler+0x124>)
 8000d3c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d3e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d05e      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x11a>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000d44:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000d46:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d48:	2304      	movs	r3, #4
 8000d4a:	e7f6      	b.n	8000d3a <HAL_DMA_IRQHandler+0x52>
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	e7f4      	b.n	8000d3a <HAL_DMA_IRQHandler+0x52>
 8000d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d54:	e7f1      	b.n	8000d3a <HAL_DMA_IRQHandler+0x52>
 8000d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d5a:	e7ee      	b.n	8000d3a <HAL_DMA_IRQHandler+0x52>
 8000d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d60:	e7eb      	b.n	8000d3a <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000d62:	2502      	movs	r5, #2
 8000d64:	4095      	lsls	r5, r2
 8000d66:	4225      	tst	r5, r4
 8000d68:	d035      	beq.n	8000dd6 <HAL_DMA_IRQHandler+0xee>
 8000d6a:	078d      	lsls	r5, r1, #30
 8000d6c:	d533      	bpl.n	8000dd6 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	0694      	lsls	r4, r2, #26
 8000d72:	d406      	bmi.n	8000d82 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	f022 020a 	bic.w	r2, r2, #10
 8000d7a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d82:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <HAL_DMA_IRQHandler+0x120>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d019      	beq.n	8000dbc <HAL_DMA_IRQHandler+0xd4>
 8000d88:	3214      	adds	r2, #20
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d018      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0xd8>
 8000d8e:	3214      	adds	r2, #20
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d017      	beq.n	8000dc4 <HAL_DMA_IRQHandler+0xdc>
 8000d94:	3214      	adds	r2, #20
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d017      	beq.n	8000dca <HAL_DMA_IRQHandler+0xe2>
 8000d9a:	3214      	adds	r2, #20
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d017      	beq.n	8000dd0 <HAL_DMA_IRQHandler+0xe8>
 8000da0:	3214      	adds	r2, #20
 8000da2:	4293      	cmp	r3, r2
 8000da4:	bf0c      	ite	eq
 8000da6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8000daa:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_DMA_IRQHandler+0x124>)
 8000db0:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000db2:	2300      	movs	r3, #0
 8000db4:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000db8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dba:	e7c1      	b.n	8000d40 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e7f6      	b.n	8000dae <HAL_DMA_IRQHandler+0xc6>
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	e7f4      	b.n	8000dae <HAL_DMA_IRQHandler+0xc6>
 8000dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc8:	e7f1      	b.n	8000dae <HAL_DMA_IRQHandler+0xc6>
 8000dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dce:	e7ee      	b.n	8000dae <HAL_DMA_IRQHandler+0xc6>
 8000dd0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd4:	e7eb      	b.n	8000dae <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000dd6:	2508      	movs	r5, #8
 8000dd8:	4095      	lsls	r5, r2
 8000dda:	4225      	tst	r5, r4
 8000ddc:	d011      	beq.n	8000e02 <HAL_DMA_IRQHandler+0x11a>
 8000dde:	0709      	lsls	r1, r1, #28
 8000de0:	d50f      	bpl.n	8000e02 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000de2:	6819      	ldr	r1, [r3, #0]
 8000de4:	f021 010e 	bic.w	r1, r1, #14
 8000de8:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dea:	2301      	movs	r3, #1
 8000dec:	fa03 f202 	lsl.w	r2, r3, r2
 8000df0:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000df2:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000df4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000dfe:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000e00:	e79e      	b.n	8000d40 <HAL_DMA_IRQHandler+0x58>
}
 8000e02:	bc70      	pop	{r4, r5, r6}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40020008 	.word	0x40020008
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000e14:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	4616      	mov	r6, r2
 8000e18:	4b65      	ldr	r3, [pc, #404]	; (8000fb0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e1a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000fc0 <HAL_GPIO_Init+0x1b0>
 8000e1e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000fc4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000e22:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e26:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000e28:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e2c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d17f      	bne.n	8000f34 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000e34:	684d      	ldr	r5, [r1, #4]
 8000e36:	2d12      	cmp	r5, #18
 8000e38:	f000 80af 	beq.w	8000f9a <HAL_GPIO_Init+0x18a>
 8000e3c:	f200 8088 	bhi.w	8000f50 <HAL_GPIO_Init+0x140>
 8000e40:	2d02      	cmp	r5, #2
 8000e42:	f000 80a7 	beq.w	8000f94 <HAL_GPIO_Init+0x184>
 8000e46:	d87c      	bhi.n	8000f42 <HAL_GPIO_Init+0x132>
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	f000 808e 	beq.w	8000f6a <HAL_GPIO_Init+0x15a>
 8000e4e:	2d01      	cmp	r5, #1
 8000e50:	f000 809e 	beq.w	8000f90 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e54:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e58:	2cff      	cmp	r4, #255	; 0xff
 8000e5a:	bf93      	iteet	ls
 8000e5c:	4682      	movls	sl, r0
 8000e5e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000e62:	3d08      	subhi	r5, #8
 8000e64:	f8d0 b000 	ldrls.w	fp, [r0]
 8000e68:	bf92      	itee	ls
 8000e6a:	00b5      	lslls	r5, r6, #2
 8000e6c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000e70:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e72:	fa09 f805 	lsl.w	r8, r9, r5
 8000e76:	ea2b 0808 	bic.w	r8, fp, r8
 8000e7a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e7e:	bf88      	it	hi
 8000e80:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e84:	ea48 0505 	orr.w	r5, r8, r5
 8000e88:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000e90:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000e94:	d04e      	beq.n	8000f34 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e96:	4d47      	ldr	r5, [pc, #284]	; (8000fb4 <HAL_GPIO_Init+0x1a4>)
 8000e98:	4f46      	ldr	r7, [pc, #280]	; (8000fb4 <HAL_GPIO_Init+0x1a4>)
 8000e9a:	69ad      	ldr	r5, [r5, #24]
 8000e9c:	f026 0803 	bic.w	r8, r6, #3
 8000ea0:	f045 0501 	orr.w	r5, r5, #1
 8000ea4:	61bd      	str	r5, [r7, #24]
 8000ea6:	69bd      	ldr	r5, [r7, #24]
 8000ea8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000eac:	f005 0501 	and.w	r5, r5, #1
 8000eb0:	9501      	str	r5, [sp, #4]
 8000eb2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000eb6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000eba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ebc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000ec0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ec4:	fa09 f90b 	lsl.w	r9, r9, fp
 8000ec8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ecc:	4d3a      	ldr	r5, [pc, #232]	; (8000fb8 <HAL_GPIO_Init+0x1a8>)
 8000ece:	42a8      	cmp	r0, r5
 8000ed0:	d068      	beq.n	8000fa4 <HAL_GPIO_Init+0x194>
 8000ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ed6:	42a8      	cmp	r0, r5
 8000ed8:	d066      	beq.n	8000fa8 <HAL_GPIO_Init+0x198>
 8000eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ede:	42a8      	cmp	r0, r5
 8000ee0:	d064      	beq.n	8000fac <HAL_GPIO_Init+0x19c>
 8000ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee6:	42a8      	cmp	r0, r5
 8000ee8:	bf0c      	ite	eq
 8000eea:	2503      	moveq	r5, #3
 8000eec:	2504      	movne	r5, #4
 8000eee:	fa05 f50b 	lsl.w	r5, r5, fp
 8000ef2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000ef6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000efa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000f00:	bf14      	ite	ne
 8000f02:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f04:	43a5      	biceq	r5, r4
 8000f06:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f08:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000f0e:	bf14      	ite	ne
 8000f10:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f12:	43a5      	biceq	r5, r4
 8000f14:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f16:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f18:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1c:	bf14      	ite	ne
 8000f1e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f20:	43a5      	biceq	r5, r4
 8000f22:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f24:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f26:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f2a:	bf14      	ite	ne
 8000f2c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2e:	ea25 0404 	biceq.w	r4, r5, r4
 8000f32:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000f34:	3601      	adds	r6, #1
 8000f36:	2e10      	cmp	r6, #16
 8000f38:	f47f af73 	bne.w	8000e22 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000f3c:	b003      	add	sp, #12
 8000f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000f42:	2d03      	cmp	r5, #3
 8000f44:	d022      	beq.n	8000f8c <HAL_GPIO_Init+0x17c>
 8000f46:	2d11      	cmp	r5, #17
 8000f48:	d184      	bne.n	8000e54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4a:	68ca      	ldr	r2, [r1, #12]
 8000f4c:	3204      	adds	r2, #4
          break;
 8000f4e:	e781      	b.n	8000e54 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000f50:	4f1a      	ldr	r7, [pc, #104]	; (8000fbc <HAL_GPIO_Init+0x1ac>)
 8000f52:	42bd      	cmp	r5, r7
 8000f54:	d009      	beq.n	8000f6a <HAL_GPIO_Init+0x15a>
 8000f56:	d812      	bhi.n	8000f7e <HAL_GPIO_Init+0x16e>
 8000f58:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000fc8 <HAL_GPIO_Init+0x1b8>
 8000f5c:	454d      	cmp	r5, r9
 8000f5e:	d004      	beq.n	8000f6a <HAL_GPIO_Init+0x15a>
 8000f60:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000f64:	454d      	cmp	r5, r9
 8000f66:	f47f af75 	bne.w	8000e54 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	688a      	ldr	r2, [r1, #8]
 8000f6c:	b1c2      	cbz	r2, 8000fa0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f6e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000f70:	bf0c      	ite	eq
 8000f72:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000f76:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	e76a      	b.n	8000e54 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000f7e:	4575      	cmp	r5, lr
 8000f80:	d0f3      	beq.n	8000f6a <HAL_GPIO_Init+0x15a>
 8000f82:	4565      	cmp	r5, ip
 8000f84:	d0f1      	beq.n	8000f6a <HAL_GPIO_Init+0x15a>
 8000f86:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000fcc <HAL_GPIO_Init+0x1bc>
 8000f8a:	e7eb      	b.n	8000f64 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	e761      	b.n	8000e54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f90:	68ca      	ldr	r2, [r1, #12]
          break;
 8000f92:	e75f      	b.n	8000e54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f94:	68ca      	ldr	r2, [r1, #12]
 8000f96:	3208      	adds	r2, #8
          break;
 8000f98:	e75c      	b.n	8000e54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f9a:	68ca      	ldr	r2, [r1, #12]
 8000f9c:	320c      	adds	r2, #12
          break;
 8000f9e:	e759      	b.n	8000e54 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	e757      	b.n	8000e54 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e7a2      	b.n	8000eee <HAL_GPIO_Init+0xde>
 8000fa8:	2501      	movs	r5, #1
 8000faa:	e7a0      	b.n	8000eee <HAL_GPIO_Init+0xde>
 8000fac:	2502      	movs	r5, #2
 8000fae:	e79e      	b.n	8000eee <HAL_GPIO_Init+0xde>
 8000fb0:	40010400 	.word	0x40010400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	10210000 	.word	0x10210000
 8000fc0:	10310000 	.word	0x10310000
 8000fc4:	10320000 	.word	0x10320000
 8000fc8:	10110000 	.word	0x10110000
 8000fcc:	10220000 	.word	0x10220000

08000fd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd0:	b10a      	cbz	r2, 8000fd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fd2:	6101      	str	r1, [r0, #16]
 8000fd4:	4770      	bx	lr
 8000fd6:	0409      	lsls	r1, r1, #16
 8000fd8:	e7fb      	b.n	8000fd2 <HAL_GPIO_WritePin+0x2>

08000fda <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_EXTI_IRQHandler>:
{
 8000fdc:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000fde:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000fe0:	6959      	ldr	r1, [r3, #20]
 8000fe2:	4201      	tst	r1, r0
 8000fe4:	d002      	beq.n	8000fec <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe8:	f7ff fff7 	bl	8000fda <HAL_GPIO_EXTI_Callback>
 8000fec:	bd08      	pop	{r3, pc}
 8000fee:	bf00      	nop
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ff4:	6802      	ldr	r2, [r0, #0]
 8000ff6:	6953      	ldr	r3, [r2, #20]
 8000ff8:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000ffc:	d00d      	beq.n	800101a <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ffe:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001002:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001004:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8001006:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001008:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800100a:	2300      	movs	r3, #0
 800100c:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800100e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8001012:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8001016:	2001      	movs	r0, #1
 8001018:	4770      	bx	lr
  }
  return HAL_OK;
 800101a:	4618      	mov	r0, r3
}
 800101c:	4770      	bx	lr

0800101e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800101e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001022:	4604      	mov	r4, r0
 8001024:	4617      	mov	r7, r2
 8001026:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001028:	f3c1 4807 	ubfx	r8, r1, #16, #8
 800102c:	b28e      	uxth	r6, r1
 800102e:	6825      	ldr	r5, [r4, #0]
 8001030:	f1b8 0f01 	cmp.w	r8, #1
 8001034:	bf0c      	ite	eq
 8001036:	696b      	ldreq	r3, [r5, #20]
 8001038:	69ab      	ldrne	r3, [r5, #24]
 800103a:	ea36 0303 	bics.w	r3, r6, r3
 800103e:	bf14      	ite	ne
 8001040:	2001      	movne	r0, #1
 8001042:	2000      	moveq	r0, #0
 8001044:	b908      	cbnz	r0, 800104a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8001046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800104a:	696b      	ldr	r3, [r5, #20]
 800104c:	055a      	lsls	r2, r3, #21
 800104e:	d512      	bpl.n	8001076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001050:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8001052:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001054:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001058:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800105a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800105e:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001060:	2304      	movs	r3, #4
 8001062:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8001064:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001066:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8001068:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800106a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 800106e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	d0d9      	beq.n	800102e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800107a:	b94f      	cbnz	r7, 8001090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800107c:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800107e:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001080:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8001082:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001086:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800108a:	2003      	movs	r0, #3
 800108c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001090:	f7ff fd32 	bl	8000af8 <HAL_GetTick>
 8001094:	eba0 0009 	sub.w	r0, r0, r9
 8001098:	4287      	cmp	r7, r0
 800109a:	d2c8      	bcs.n	800102e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800109c:	e7ee      	b.n	800107c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

0800109e <I2C_WaitOnFlagUntilTimeout>:
{
 800109e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010a2:	4604      	mov	r4, r0
 80010a4:	4690      	mov	r8, r2
 80010a6:	461f      	mov	r7, r3
 80010a8:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80010aa:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80010ae:	b28d      	uxth	r5, r1
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	f1b9 0f01 	cmp.w	r9, #1
 80010b6:	bf0c      	ite	eq
 80010b8:	695b      	ldreq	r3, [r3, #20]
 80010ba:	699b      	ldrne	r3, [r3, #24]
 80010bc:	ea35 0303 	bics.w	r3, r5, r3
 80010c0:	bf0c      	ite	eq
 80010c2:	2301      	moveq	r3, #1
 80010c4:	2300      	movne	r3, #0
 80010c6:	4543      	cmp	r3, r8
 80010c8:	d002      	beq.n	80010d0 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
}
 80010cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80010d0:	1c7b      	adds	r3, r7, #1
 80010d2:	d0ed      	beq.n	80010b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010d4:	b95f      	cbnz	r7, 80010ee <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80010d6:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80010d8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80010da:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80010dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80010e0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80010e4:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80010ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010ee:	f7ff fd03 	bl	8000af8 <HAL_GetTick>
 80010f2:	1b80      	subs	r0, r0, r6
 80010f4:	4287      	cmp	r7, r0
 80010f6:	d2db      	bcs.n	80010b0 <I2C_WaitOnFlagUntilTimeout+0x12>
 80010f8:	e7ed      	b.n	80010d6 <I2C_WaitOnFlagUntilTimeout+0x38>

080010fa <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80010fa:	b570      	push	{r4, r5, r6, lr}
 80010fc:	4604      	mov	r4, r0
 80010fe:	460d      	mov	r5, r1
 8001100:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	d501      	bpl.n	800110e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800110a:	2000      	movs	r0, #0
 800110c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800110e:	4620      	mov	r0, r4
 8001110:	f7ff ff70 	bl	8000ff4 <I2C_IsAcknowledgeFailed>
 8001114:	b9a8      	cbnz	r0, 8001142 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001116:	1c6a      	adds	r2, r5, #1
 8001118:	d0f3      	beq.n	8001102 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800111a:	b965      	cbnz	r5, 8001136 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800111c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800111e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001126:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001128:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800112a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800112c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001130:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001134:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001136:	f7ff fcdf 	bl	8000af8 <HAL_GetTick>
 800113a:	1b80      	subs	r0, r0, r6
 800113c:	4285      	cmp	r5, r0
 800113e:	d2e0      	bcs.n	8001102 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8001140:	e7ec      	b.n	800111c <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001142:	2001      	movs	r0, #1
}
 8001144:	bd70      	pop	{r4, r5, r6, pc}
	...

08001148 <I2C_RequestMemoryWrite>:
{
 8001148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800114c:	4615      	mov	r5, r2
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800114e:	6802      	ldr	r2, [r0, #0]
{
 8001150:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001152:	6813      	ldr	r3, [r2, #0]
{
 8001154:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115a:	6013      	str	r3, [r2, #0]
{
 800115c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800115e:	9600      	str	r6, [sp, #0]
 8001160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001162:	2200      	movs	r2, #0
 8001164:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8001168:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800116a:	f7ff ff98 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 800116e:	b968      	cbnz	r0, 800118c <I2C_RequestMemoryWrite+0x44>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8001176:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800117a:	4633      	mov	r3, r6
 800117c:	491a      	ldr	r1, [pc, #104]	; (80011e8 <I2C_RequestMemoryWrite+0xa0>)
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff ff4d 	bl	800101e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001184:	b130      	cbz	r0, 8001194 <I2C_RequestMemoryWrite+0x4c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001188:	2b04      	cmp	r3, #4
 800118a:	d018      	beq.n	80011be <I2C_RequestMemoryWrite+0x76>
      return HAL_TIMEOUT;
 800118c:	2003      	movs	r0, #3
}
 800118e:	b004      	add	sp, #16
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	9003      	str	r0, [sp, #12]
 8001198:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800119a:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800119c:	9203      	str	r2, [sp, #12]
 800119e:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a0:	4632      	mov	r2, r6
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a2:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a6:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011a8:	f7ff ffa7 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 80011ac:	b148      	cbz	r0, 80011c2 <I2C_RequestMemoryWrite+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d1eb      	bne.n	800118c <I2C_RequestMemoryWrite+0x44>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011b4:	6822      	ldr	r2, [r4, #0]
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011bc:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
 80011c0:	e7e5      	b.n	800118e <I2C_RequestMemoryWrite+0x46>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80011c2:	f1b8 0f01 	cmp.w	r8, #1
 80011c6:	6823      	ldr	r3, [r4, #0]
 80011c8:	d102      	bne.n	80011d0 <I2C_RequestMemoryWrite+0x88>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011ca:	b2ed      	uxtb	r5, r5
 80011cc:	611d      	str	r5, [r3, #16]
 80011ce:	e7de      	b.n	800118e <I2C_RequestMemoryWrite+0x46>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80011d0:	0a2a      	lsrs	r2, r5, #8
 80011d2:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80011d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011d6:	4632      	mov	r2, r6
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff8e 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d1e5      	bne.n	80011ae <I2C_RequestMemoryWrite+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	e7f1      	b.n	80011ca <I2C_RequestMemoryWrite+0x82>
 80011e6:	bf00      	nop
 80011e8:	00010002 	.word	0x00010002

080011ec <I2C_RequestMemoryRead>:
{
 80011ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80011f0:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80011f2:	6803      	ldr	r3, [r0, #0]
{
 80011f4:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80011f6:	681a      	ldr	r2, [r3, #0]
{
 80011f8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80011fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001200:	681a      	ldr	r2, [r3, #0]
{
 8001202:	460f      	mov	r7, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001208:	601a      	str	r2, [r3, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800120a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800120e:	9500      	str	r5, [sp, #0]
 8001210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001212:	2200      	movs	r2, #0
{
 8001214:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001216:	f7ff ff42 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 800121a:	b980      	cbnz	r0, 800123e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	b2ff      	uxtb	r7, r7
 8001220:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8001224:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001226:	492d      	ldr	r1, [pc, #180]	; (80012dc <I2C_RequestMemoryRead+0xf0>)
 8001228:	462b      	mov	r3, r5
 800122a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fef6 	bl	800101e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001232:	b140      	cbz	r0, 8001246 <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001236:	2b04      	cmp	r3, #4
 8001238:	d101      	bne.n	800123e <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 800123a:	2001      	movs	r0, #1
 800123c:	e000      	b.n	8001240 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 800123e:	2003      	movs	r0, #3
}
 8001240:	b004      	add	sp, #16
 8001242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	9003      	str	r0, [sp, #12]
 800124a:	695a      	ldr	r2, [r3, #20]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800124c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800124e:	9203      	str	r2, [sp, #12]
 8001250:	699b      	ldr	r3, [r3, #24]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001252:	462a      	mov	r2, r5
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001254:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001256:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001258:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800125a:	f7ff ff4e 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 800125e:	b140      	cbz	r0, 8001272 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001260:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001262:	2b04      	cmp	r3, #4
 8001264:	d1eb      	bne.n	800123e <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001266:	6822      	ldr	r2, [r4, #0]
 8001268:	6813      	ldr	r3, [r2, #0]
 800126a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	e7e3      	b.n	800123a <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001272:	f1b8 0f01 	cmp.w	r8, #1
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	d124      	bne.n	80012c4 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800127a:	b2f6      	uxtb	r6, r6
 800127c:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800127e:	462a      	mov	r2, r5
 8001280:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff ff39 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 8001288:	4602      	mov	r2, r0
 800128a:	2800      	cmp	r0, #0
 800128c:	d1e8      	bne.n	8001260 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800128e:	6821      	ldr	r1, [r4, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001290:	4620      	mov	r0, r4
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8001292:	680b      	ldr	r3, [r1, #0]
 8001294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001298:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800129a:	9500      	str	r5, [sp, #0]
 800129c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800129e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012a2:	f7ff fefc 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 80012a6:	2800      	cmp	r0, #0
 80012a8:	d1c9      	bne.n	800123e <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	f047 0701 	orr.w	r7, r7, #1
 80012b0:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80012b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80012b4:	462b      	mov	r3, r5
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <I2C_RequestMemoryRead+0xf0>)
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff feb0 	bl	800101e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d1b8      	bne.n	8001234 <I2C_RequestMemoryRead+0x48>
 80012c2:	e7bd      	b.n	8001240 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80012c4:	0a32      	lsrs	r2, r6, #8
 80012c6:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80012ca:	462a      	mov	r2, r5
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff ff14 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d1c4      	bne.n	8001260 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	e7cf      	b.n	800127a <I2C_RequestMemoryRead+0x8e>
 80012da:	bf00      	nop
 80012dc:	00010002 	.word	0x00010002

080012e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 80012e0:	b570      	push	{r4, r5, r6, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80012e8:	6820      	ldr	r0, [r4, #0]
 80012ea:	6943      	ldr	r3, [r0, #20]
 80012ec:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80012f0:	d001      	beq.n	80012f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80012f2:	2000      	movs	r0, #0
}
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80012f6:	6942      	ldr	r2, [r0, #20]
 80012f8:	06d2      	lsls	r2, r2, #27
 80012fa:	d50b      	bpl.n	8001314 <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012fc:	f06f 0210 	mvn.w	r2, #16
 8001300:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 8001302:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001306:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800130c:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 800130e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8001312:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001314:	b95d      	cbnz	r5, 800132e <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001316:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001318:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8001320:	2320      	movs	r3, #32
 8001322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001326:	2300      	movs	r3, #0
 8001328:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800132c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800132e:	f7ff fbe3 	bl	8000af8 <HAL_GetTick>
 8001332:	1b80      	subs	r0, r0, r6
 8001334:	4285      	cmp	r5, r0
 8001336:	d2d7      	bcs.n	80012e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 8001338:	e7ed      	b.n	8001316 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

0800133a <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 800133a:	b570      	push	{r4, r5, r6, lr}
 800133c:	4604      	mov	r4, r0
 800133e:	460d      	mov	r5, r1
 8001340:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	075b      	lsls	r3, r3, #29
 8001348:	d501      	bpl.n	800134e <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 800134a:	2000      	movs	r0, #0
 800134c:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800134e:	4620      	mov	r0, r4
 8001350:	f7ff fe50 	bl	8000ff4 <I2C_IsAcknowledgeFailed>
 8001354:	b9a8      	cbnz	r0, 8001382 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8001356:	1c6a      	adds	r2, r5, #1
 8001358:	d0f3      	beq.n	8001342 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800135a:	b965      	cbnz	r5, 8001376 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800135c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800135e:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8001366:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8001368:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800136a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800136c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8001370:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001374:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001376:	f7ff fbbf 	bl	8000af8 <HAL_GetTick>
 800137a:	1b80      	subs	r0, r0, r6
 800137c:	4285      	cmp	r5, r0
 800137e:	d2e0      	bcs.n	8001342 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8001380:	e7ec      	b.n	800135c <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001382:	2001      	movs	r0, #1
}
 8001384:	bd70      	pop	{r4, r5, r6, pc}
	...

08001388 <HAL_I2C_Init>:
{
 8001388:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 800138a:	4604      	mov	r4, r0
 800138c:	b908      	cbnz	r0, 8001392 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800138e:	2001      	movs	r0, #1
 8001390:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001392:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139a:	b91b      	cbnz	r3, 80013a4 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800139c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80013a0:	f001 ff3c 	bl	800321c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a4:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80013a6:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013ac:	6813      	ldr	r3, [r2, #0]
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013b4:	f001 f964 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013b8:	6863      	ldr	r3, [r4, #4]
 80013ba:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <HAL_I2C_Init+0xf0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d830      	bhi.n	8001422 <HAL_I2C_Init+0x9a>
 80013c0:	4a2e      	ldr	r2, [pc, #184]	; (800147c <HAL_I2C_Init+0xf4>)
 80013c2:	4290      	cmp	r0, r2
 80013c4:	d9e3      	bls.n	800138e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80013c6:	4a2e      	ldr	r2, [pc, #184]	; (8001480 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 80013c8:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80013ca:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80013ce:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80013d0:	3201      	adds	r2, #1
 80013d2:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80013d4:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_I2C_Init+0xf0>)
 80013d6:	3801      	subs	r0, #1
 80013d8:	4293      	cmp	r3, r2
 80013da:	d832      	bhi.n	8001442 <HAL_I2C_Init+0xba>
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e2:	1c43      	adds	r3, r0, #1
 80013e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	bf38      	it	cc
 80013ec:	2304      	movcc	r3, #4
 80013ee:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f0:	6a22      	ldr	r2, [r4, #32]
 80013f2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80013fa:	68e2      	ldr	r2, [r4, #12]
 80013fc:	6923      	ldr	r3, [r4, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001402:	69a2      	ldr	r2, [r4, #24]
 8001404:	6963      	ldr	r3, [r4, #20]
 8001406:	4313      	orrs	r3, r2
 8001408:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800140a:	680b      	ldr	r3, [r1, #0]
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001412:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800141a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800141c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001420:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001422:	4a18      	ldr	r2, [pc, #96]	; (8001484 <HAL_I2C_Init+0xfc>)
 8001424:	4290      	cmp	r0, r2
 8001426:	d9b2      	bls.n	800138e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001428:	4d15      	ldr	r5, [pc, #84]	; (8001480 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800142a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800142e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001432:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001434:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001436:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001438:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800143c:	fbb2 f2f5 	udiv	r2, r2, r5
 8001440:	e7c6      	b.n	80013d0 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001442:	68a2      	ldr	r2, [r4, #8]
 8001444:	b952      	cbnz	r2, 800145c <HAL_I2C_Init+0xd4>
 8001446:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800144a:	fbb0 f0f3 	udiv	r0, r0, r3
 800144e:	1c43      	adds	r3, r0, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	b16b      	cbz	r3, 8001472 <HAL_I2C_Init+0xea>
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	e7c8      	b.n	80013ee <HAL_I2C_Init+0x66>
 800145c:	2219      	movs	r2, #25
 800145e:	4353      	muls	r3, r2
 8001460:	fbb0 f0f3 	udiv	r0, r0, r3
 8001464:	1c43      	adds	r3, r0, #1
 8001466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800146a:	b113      	cbz	r3, 8001472 <HAL_I2C_Init+0xea>
 800146c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001470:	e7bd      	b.n	80013ee <HAL_I2C_Init+0x66>
 8001472:	2301      	movs	r3, #1
 8001474:	e7bb      	b.n	80013ee <HAL_I2C_Init+0x66>
 8001476:	bf00      	nop
 8001478:	000186a0 	.word	0x000186a0
 800147c:	001e847f 	.word	0x001e847f
 8001480:	000f4240 	.word	0x000f4240
 8001484:	003d08ff 	.word	0x003d08ff

08001488 <HAL_I2C_Mem_Write>:
{
 8001488:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800148c:	4604      	mov	r4, r0
 800148e:	469a      	mov	sl, r3
 8001490:	4688      	mov	r8, r1
 8001492:	4691      	mov	r9, r2
 8001494:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  tickstart = HAL_GetTick();
 8001496:	f7ff fb2f 	bl	8000af8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 800149a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800149e:	4605      	mov	r5, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d003      	beq.n	80014ac <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80014a4:	2002      	movs	r0, #2
}
 80014a6:	b002      	add	sp, #8
 80014a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014ac:	9000      	str	r0, [sp, #0]
 80014ae:	2319      	movs	r3, #25
 80014b0:	2201      	movs	r2, #1
 80014b2:	493e      	ldr	r1, [pc, #248]	; (80015ac <HAL_I2C_Mem_Write+0x124>)
 80014b4:	4620      	mov	r0, r4
 80014b6:	f7ff fdf2 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 80014ba:	2800      	cmp	r0, #0
 80014bc:	d1f2      	bne.n	80014a4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80014be:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d0ee      	beq.n	80014a4 <HAL_I2C_Mem_Write+0x1c>
 80014c6:	2301      	movs	r3, #1
 80014c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014cc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ce:	2700      	movs	r7, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d0:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014d2:	4641      	mov	r1, r8
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014d4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80014d6:	bf58      	it	pl
 80014d8:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014da:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 80014dc:	bf5c      	itt	pl
 80014de:	f042 0201 	orrpl.w	r2, r2, #1
 80014e2:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ea:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014ec:	2321      	movs	r3, #33	; 0x21
 80014ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 80014f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fa:	6427      	str	r7, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80014fc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014fe:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001502:	9501      	str	r5, [sp, #4]
    hi2c->XferCount   = Size;
 8001504:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_I2C_Mem_Write+0x128>)
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001508:	9600      	str	r6, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800150a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800150c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150e:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001510:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001512:	4653      	mov	r3, sl
 8001514:	f7ff fe18 	bl	8001148 <I2C_RequestMemoryWrite>
 8001518:	2800      	cmp	r0, #0
 800151a:	d02a      	beq.n	8001572 <HAL_I2C_Mem_Write+0xea>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800151c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800151e:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001522:	2b04      	cmp	r3, #4
 8001524:	d107      	bne.n	8001536 <HAL_I2C_Mem_Write+0xae>
        return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e7bd      	b.n	80014a6 <HAL_I2C_Mem_Write+0x1e>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800152a:	f7ff fde6 	bl	80010fa <I2C_WaitOnTXEFlagUntilTimeout>
 800152e:	b120      	cbz	r0, 800153a <HAL_I2C_Mem_Write+0xb2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001530:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001532:	2b04      	cmp	r3, #4
 8001534:	d034      	beq.n	80015a0 <HAL_I2C_Mem_Write+0x118>
          return HAL_TIMEOUT;
 8001536:	2003      	movs	r0, #3
 8001538:	e7b5      	b.n	80014a6 <HAL_I2C_Mem_Write+0x1e>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800153a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800153c:	6827      	ldr	r7, [r4, #0]
 800153e:	1c4b      	adds	r3, r1, #1
 8001540:	6263      	str	r3, [r4, #36]	; 0x24
 8001542:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8001544:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001546:	613b      	str	r3, [r7, #16]
      hi2c->XferCount--;
 8001548:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800154a:	1e50      	subs	r0, r2, #1
      hi2c->XferCount--;
 800154c:	3b01      	subs	r3, #1
 800154e:	b29b      	uxth	r3, r3
 8001550:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001552:	697b      	ldr	r3, [r7, #20]
      hi2c->XferSize--;
 8001554:	b280      	uxth	r0, r0
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001556:	075b      	lsls	r3, r3, #29
      hi2c->XferSize--;
 8001558:	8520      	strh	r0, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800155a:	d50a      	bpl.n	8001572 <HAL_I2C_Mem_Write+0xea>
 800155c:	b148      	cbz	r0, 8001572 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800155e:	1c8b      	adds	r3, r1, #2
 8001560:	6263      	str	r3, [r4, #36]	; 0x24
 8001562:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8001564:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001566:	613b      	str	r3, [r7, #16]
        hi2c->XferCount--;
 8001568:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800156a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800156c:	3b01      	subs	r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8001572:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001574:	462a      	mov	r2, r5
 8001576:	4631      	mov	r1, r6
 8001578:	4620      	mov	r0, r4
    while(hi2c->XferSize > 0U)
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1d5      	bne.n	800152a <HAL_I2C_Mem_Write+0xa2>
    if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157e:	f7ff fedc 	bl	800133a <I2C_WaitOnBTFFlagUntilTimeout>
 8001582:	2800      	cmp	r0, #0
 8001584:	d1d4      	bne.n	8001530 <HAL_I2C_Mem_Write+0xa8>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001590:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001592:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001596:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800159a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 800159e:	e782      	b.n	80014a6 <HAL_I2C_Mem_Write+0x1e>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80015a0:	6822      	ldr	r2, [r4, #0]
 80015a2:	6813      	ldr	r3, [r2, #0]
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e7bc      	b.n	8001526 <HAL_I2C_Mem_Write+0x9e>
 80015ac:	00100002 	.word	0x00100002
 80015b0:	ffff0000 	.word	0xffff0000

080015b4 <HAL_I2C_Mem_Read>:
{
 80015b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015b8:	4604      	mov	r4, r0
 80015ba:	b086      	sub	sp, #24
 80015bc:	469a      	mov	sl, r3
 80015be:	460d      	mov	r5, r1
 80015c0:	4691      	mov	r9, r2
 80015c2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80015c4:	f7ff fa98 	bl	8000af8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015c8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80015cc:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	d004      	beq.n	80015dc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80015d2:	2502      	movs	r5, #2
}
 80015d4:	4628      	mov	r0, r5
 80015d6:	b006      	add	sp, #24
 80015d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015dc:	9000      	str	r0, [sp, #0]
 80015de:	2319      	movs	r3, #25
 80015e0:	2201      	movs	r2, #1
 80015e2:	4981      	ldr	r1, [pc, #516]	; (80017e8 <HAL_I2C_Mem_Read+0x234>)
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fd5a 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 80015ea:	2800      	cmp	r0, #0
 80015ec:	d1f1      	bne.n	80015d2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 80015ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d0ed      	beq.n	80015d2 <HAL_I2C_Mem_Read+0x1e>
 80015f6:	2301      	movs	r3, #1
 80015f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fc:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015fe:	f04f 0800 	mov.w	r8, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001602:	681a      	ldr	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001604:	4629      	mov	r1, r5
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001606:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8001608:	bf58      	it	pl
 800160a:	681a      	ldrpl	r2, [r3, #0]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800160c:	4620      	mov	r0, r4
      __HAL_I2C_ENABLE(hi2c);
 800160e:	bf5c      	itt	pl
 8001610:	f042 0201 	orrpl.w	r2, r2, #1
 8001614:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161c:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800161e:	2322      	movs	r3, #34	; 0x22
 8001620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001624:	2340      	movs	r3, #64	; 0x40
 8001626:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->pBuffPtr    = pData;
 800162a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8001630:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001632:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001636:	9601      	str	r6, [sp, #4]
    hi2c->XferCount   = Size;
 8001638:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163a:	4b6c      	ldr	r3, [pc, #432]	; (80017ec <HAL_I2C_Mem_Read+0x238>)
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800163c:	9700      	str	r7, [sp, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8001640:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001642:	464a      	mov	r2, r9
    hi2c->XferSize    = hi2c->XferCount;
 8001644:	8523      	strh	r3, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001646:	4653      	mov	r3, sl
 8001648:	f7ff fdd0 	bl	80011ec <I2C_RequestMemoryRead>
 800164c:	4605      	mov	r5, r0
 800164e:	b130      	cbz	r0, 800165e <HAL_I2C_Mem_Read+0xaa>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001650:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001652:	f884 803c 	strb.w	r8, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001656:	2b04      	cmp	r3, #4
 8001658:	d13d      	bne.n	80016d6 <HAL_I2C_Mem_Read+0x122>
              return HAL_ERROR;
 800165a:	2501      	movs	r5, #1
 800165c:	e7ba      	b.n	80015d4 <HAL_I2C_Mem_Read+0x20>
    if(hi2c->XferSize == 0U)
 800165e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	b992      	cbnz	r2, 800168a <HAL_I2C_Mem_Read+0xd6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001664:	9002      	str	r0, [sp, #8]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	9202      	str	r2, [sp, #8]
 800166a:	699a      	ldr	r2, [r3, #24]
 800166c:	9202      	str	r2, [sp, #8]
 800166e:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001676:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001678:	2320      	movs	r3, #32
 800167a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800167e:	2300      	movs	r3, #0
 8001680:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8001684:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8001688:	e7a4      	b.n	80015d4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 1U)
 800168a:	2a01      	cmp	r2, #1
 800168c:	d125      	bne.n	80016da <HAL_I2C_Mem_Read+0x126>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001694:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001696:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	9003      	str	r0, [sp, #12]
 800169c:	695a      	ldr	r2, [r3, #20]
 800169e:	9203      	str	r2, [sp, #12]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	9203      	str	r2, [sp, #12]
 80016a4:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016ae:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016b0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80017f0 <HAL_I2C_Mem_Read+0x23c>
    while(hi2c->XferSize > 0U)
 80016b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0de      	beq.n	8001678 <HAL_I2C_Mem_Read+0xc4>
      if(hi2c->XferSize <= 3U)
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d877      	bhi.n	80017ae <HAL_I2C_Mem_Read+0x1fa>
        if(hi2c->XferSize== 1U)
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d127      	bne.n	8001712 <HAL_I2C_Mem_Read+0x15e>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 80016c2:	4632      	mov	r2, r6
 80016c4:	4639      	mov	r1, r7
 80016c6:	4620      	mov	r0, r4
 80016c8:	f7ff fe0a 	bl	80012e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d03f      	beq.n	8001750 <HAL_I2C_Mem_Read+0x19c>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80016d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016d2:	2b20      	cmp	r3, #32
 80016d4:	d1c1      	bne.n	800165a <HAL_I2C_Mem_Read+0xa6>
              return HAL_TIMEOUT;
 80016d6:	2503      	movs	r5, #3
 80016d8:	e77c      	b.n	80015d4 <HAL_I2C_Mem_Read+0x20>
    else if(hi2c->XferSize == 2U)
 80016da:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80016dc:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 80016de:	d10e      	bne.n	80016fe <HAL_I2C_Mem_Read+0x14a>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 80016e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80016e6:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	9004      	str	r0, [sp, #16]
 80016ec:	695a      	ldr	r2, [r3, #20]
 80016ee:	9204      	str	r2, [sp, #16]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	9204      	str	r2, [sp, #16]
 80016f4:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fc:	e7d6      	b.n	80016ac <HAL_I2C_Mem_Read+0xf8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001702:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001704:	9005      	str	r0, [sp, #20]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	9205      	str	r2, [sp, #20]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	9305      	str	r3, [sp, #20]
 800170e:	9b05      	ldr	r3, [sp, #20]
 8001710:	e7ce      	b.n	80016b0 <HAL_I2C_Mem_Read+0xfc>
        else if(hi2c->XferSize == 2U)
 8001712:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001714:	9600      	str	r6, [sp, #0]
 8001716:	463b      	mov	r3, r7
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4641      	mov	r1, r8
 800171e:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8001720:	d124      	bne.n	800176c <HAL_I2C_Mem_Read+0x1b8>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001722:	f7ff fcbc 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 8001726:	2800      	cmp	r0, #0
 8001728:	d1d5      	bne.n	80016d6 <HAL_I2C_Mem_Read+0x122>
 800172a:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001734:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001736:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	1c51      	adds	r1, r2, #1
 800173c:	6261      	str	r1, [r4, #36]	; 0x24
 800173e:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8001740:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001742:	3b01      	subs	r3, #1
 8001744:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001746:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001748:	3b01      	subs	r3, #1
 800174a:	b29b      	uxth	r3, r3
 800174c:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800174e:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	6262      	str	r2, [r4, #36]	; 0x24
 8001756:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001758:	6912      	ldr	r2, [r2, #16]
 800175a:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800175c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800175e:	3b01      	subs	r3, #1
 8001760:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	8563      	strh	r3, [r4, #42]	; 0x2a
 800176a:	e7a3      	b.n	80016b4 <HAL_I2C_Mem_Read+0x100>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800176c:	f7ff fc97 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 8001770:	4602      	mov	r2, r0
 8001772:	2800      	cmp	r0, #0
 8001774:	d1af      	bne.n	80016d6 <HAL_I2C_Mem_Read+0x122>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001776:	6821      	ldr	r1, [r4, #0]
 8001778:	680b      	ldr	r3, [r1, #0]
 800177a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800177e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001782:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001784:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001786:	1c59      	adds	r1, r3, #1
 8001788:	6261      	str	r1, [r4, #36]	; 0x24
 800178a:	6821      	ldr	r1, [r4, #0]
 800178c:	6909      	ldr	r1, [r1, #16]
 800178e:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8001790:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001792:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8001794:	3b01      	subs	r3, #1
 8001796:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001798:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800179a:	4641      	mov	r1, r8
          hi2c->XferCount--;
 800179c:	3b01      	subs	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a2:	463b      	mov	r3, r7
 80017a4:	f7ff fc7b 	bl	800109e <I2C_WaitOnFlagUntilTimeout>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	d0bf      	beq.n	800172c <HAL_I2C_Mem_Read+0x178>
 80017ac:	e793      	b.n	80016d6 <HAL_I2C_Mem_Read+0x122>
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ae:	4632      	mov	r2, r6
 80017b0:	4639      	mov	r1, r7
 80017b2:	4620      	mov	r0, r4
 80017b4:	f7ff fd94 	bl	80012e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017b8:	2800      	cmp	r0, #0
 80017ba:	d189      	bne.n	80016d0 <HAL_I2C_Mem_Read+0x11c>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	6262      	str	r2, [r4, #36]	; 0x24
 80017c2:	6822      	ldr	r2, [r4, #0]
 80017c4:	6912      	ldr	r2, [r2, #16]
 80017c6:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 80017c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017ca:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 80017cc:	3b01      	subs	r3, #1
 80017ce:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80017d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80017d8:	6953      	ldr	r3, [r2, #20]
 80017da:	075b      	lsls	r3, r3, #29
 80017dc:	f57f af6a 	bpl.w	80016b4 <HAL_I2C_Mem_Read+0x100>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80017e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017e2:	1c59      	adds	r1, r3, #1
 80017e4:	6261      	str	r1, [r4, #36]	; 0x24
 80017e6:	e7b7      	b.n	8001758 <HAL_I2C_Mem_Read+0x1a4>
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000
 80017f0:	00010004 	.word	0x00010004

080017f4 <HAL_I2C_MasterTxCpltCallback>:
 80017f4:	4770      	bx	lr

080017f6 <HAL_I2C_MasterRxCpltCallback>:
 80017f6:	4770      	bx	lr

080017f8 <HAL_I2C_SlaveTxCpltCallback>:
 80017f8:	4770      	bx	lr

080017fa <HAL_I2C_SlaveRxCpltCallback>:
 80017fa:	4770      	bx	lr

080017fc <HAL_I2C_AddrCallback>:
{
 80017fc:	4770      	bx	lr

080017fe <HAL_I2C_ListenCpltCallback>:
 80017fe:	4770      	bx	lr

08001800 <HAL_I2C_MemTxCpltCallback>:
 8001800:	4770      	bx	lr

08001802 <HAL_I2C_MemRxCpltCallback>:
 8001802:	4770      	bx	lr

08001804 <HAL_I2C_ErrorCallback>:
 8001804:	4770      	bx	lr

08001806 <HAL_I2C_AbortCpltCallback>:
{
 8001806:	4770      	bx	lr

08001808 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001808:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800180c:	b510      	push	{r4, lr}
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800180e:	3b29      	subs	r3, #41	; 0x29
 8001810:	2b01      	cmp	r3, #1
{
 8001812:	4604      	mov	r4, r0
 8001814:	6803      	ldr	r3, [r0, #0]
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001816:	d839      	bhi.n	800188c <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001818:	2200      	movs	r2, #0
 800181a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800181c:	2228      	movs	r2, #40	; 0x28
 800181e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001828:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001830:	d054      	beq.n	80018dc <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001832:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001834:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800183a:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800183c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001840:	2b01      	cmp	r3, #1
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <I2C_ITError+0x120>)
 8001844:	d031      	beq.n	80018aa <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001846:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001848:	f7ff fa06 	bl	8000c58 <HAL_DMA_Abort_IT>
 800184c:	b150      	cbz	r0, 8001864 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 800184e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001850:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001852:	6813      	ldr	r3, [r2, #0]
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800185a:	2320      	movs	r3, #32
 800185c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001860:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001862:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001864:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001868:	2b28      	cmp	r3, #40	; 0x28
 800186a:	d10e      	bne.n	800188a <I2C_ITError+0x82>
 800186c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800186e:	075b      	lsls	r3, r3, #29
 8001870:	d50b      	bpl.n	800188a <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001872:	4b2e      	ldr	r3, [pc, #184]	; (800192c <I2C_ITError+0x124>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001874:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001876:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8001878:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 800187a:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800187c:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800187e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001882:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001886:	f7ff ffba 	bl	80017fe <HAL_I2C_ListenCpltCallback>
 800188a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800188c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001890:	2a60      	cmp	r2, #96	; 0x60
 8001892:	d005      	beq.n	80018a0 <I2C_ITError+0x98>
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001898:	bf5c      	itt	pl
 800189a:	2220      	movpl	r2, #32
 800189c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80018a0:	2200      	movs	r2, #0
 80018a2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80018a8:	e7bb      	b.n	8001822 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80018aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80018ac:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80018ae:	f7ff f9d3 	bl	8000c58 <HAL_DMA_Abort_IT>
 80018b2:	2800      	cmp	r0, #0
 80018b4:	d0d6      	beq.n	8001864 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	6953      	ldr	r3, [r2, #20]
 80018ba:	0658      	lsls	r0, r3, #25
 80018bc:	d504      	bpl.n	80018c8 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018c0:	6912      	ldr	r2, [r2, #16]
 80018c2:	1c59      	adds	r1, r3, #1
 80018c4:	6261      	str	r1, [r4, #36]	; 0x24
 80018c6:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 80018c8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80018ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	2320      	movs	r3, #32
 80018d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80018da:	e7c1      	b.n	8001860 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80018dc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80018e0:	2960      	cmp	r1, #96	; 0x60
 80018e2:	d114      	bne.n	800190e <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 80018e4:	2120      	movs	r1, #32
 80018e6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ea:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80018ec:	695a      	ldr	r2, [r3, #20]
 80018ee:	0651      	lsls	r1, r2, #25
 80018f0:	d504      	bpl.n	80018fc <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	1c51      	adds	r1, r2, #1
 80018f8:	6261      	str	r1, [r4, #36]	; 0x24
 80018fa:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80018fc:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 80018fe:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001908:	f7ff ff7d 	bl	8001806 <HAL_I2C_AbortCpltCallback>
 800190c:	e7aa      	b.n	8001864 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800190e:	695a      	ldr	r2, [r3, #20]
 8001910:	0652      	lsls	r2, r2, #25
 8001912:	d504      	bpl.n	800191e <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001914:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	1c51      	adds	r1, r2, #1
 800191a:	6261      	str	r1, [r4, #36]	; 0x24
 800191c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800191e:	4620      	mov	r0, r4
 8001920:	f7ff ff70 	bl	8001804 <HAL_I2C_ErrorCallback>
 8001924:	e79e      	b.n	8001864 <I2C_ITError+0x5c>
 8001926:	bf00      	nop
 8001928:	08002141 	.word	0x08002141
 800192c:	ffff0000 	.word	0xffff0000

08001930 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001930:	6803      	ldr	r3, [r0, #0]
{
 8001932:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001934:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001936:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001938:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 800193a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
{
 800193e:	b08d      	sub	sp, #52	; 0x34
  uint32_t CurrentMode  = hi2c->Mode;
 8001940:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001942:	2c10      	cmp	r4, #16
 8001944:	d002      	beq.n	800194c <HAL_I2C_EV_IRQHandler+0x1c>
 8001946:	2c40      	cmp	r4, #64	; 0x40
 8001948:	f040 8256 	bne.w	8001df8 <HAL_I2C_EV_IRQHandler+0x4c8>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800194c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001950:	d066      	beq.n	8001a20 <HAL_I2C_EV_IRQHandler+0xf0>
 8001952:	0597      	lsls	r7, r2, #22
 8001954:	d564      	bpl.n	8001a20 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001956:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800195a:	2c40      	cmp	r4, #64	; 0x40
 800195c:	d143      	bne.n	80019e6 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800195e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001960:	2c00      	cmp	r4, #0
 8001962:	d13b      	bne.n	80019dc <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001964:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001966:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800196a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800196c:	4e94      	ldr	r6, [pc, #592]	; (8001bc0 <HAL_I2C_EV_IRQHandler+0x290>)
 800196e:	4c95      	ldr	r4, [pc, #596]	; (8001bc4 <HAL_I2C_EV_IRQHandler+0x294>)
 8001970:	402e      	ands	r6, r5
 8001972:	400c      	ands	r4, r1
 8001974:	2e00      	cmp	r6, #0
 8001976:	f000 81a2 	beq.w	8001cbe <HAL_I2C_EV_IRQHandler+0x38e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800197a:	4d93      	ldr	r5, [pc, #588]	; (8001bc8 <HAL_I2C_EV_IRQHandler+0x298>)
 800197c:	400d      	ands	r5, r1
 800197e:	2d00      	cmp	r5, #0
 8001980:	f000 8169 	beq.w	8001c56 <HAL_I2C_EV_IRQHandler+0x326>
 8001984:	0555      	lsls	r5, r2, #21
 8001986:	f140 8166 	bpl.w	8001c56 <HAL_I2C_EV_IRQHandler+0x326>
 800198a:	2c00      	cmp	r4, #0
 800198c:	f040 8163 	bne.w	8001c56 <HAL_I2C_EV_IRQHandler+0x326>
  uint32_t CurrentState       = hi2c->State;
 8001990:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001994:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001996:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentState       = hi2c->State;
 800199a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 800199c:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800199e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	f040 8117 	bne.w	8001bd4 <HAL_I2C_EV_IRQHandler+0x2a4>
 80019a6:	2a21      	cmp	r2, #33	; 0x21
 80019a8:	f040 8116 	bne.w	8001bd8 <HAL_I2C_EV_IRQHandler+0x2a8>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019ac:	2c04      	cmp	r4, #4
 80019ae:	f000 816f 	beq.w	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
 80019b2:	2c08      	cmp	r4, #8
 80019b4:	f000 816c 	beq.w	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
 80019b8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80019bc:	f000 8168 	beq.w	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80019c6:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80019c8:	2311      	movs	r3, #17
 80019ca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019cc:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	2320      	movs	r3, #32
 80019d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019d6:	f7ff ff0d 	bl	80017f4 <HAL_I2C_MasterTxCpltCallback>
 80019da:	e118      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019dc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80019de:	f044 0401 	orr.w	r4, r4, #1
 80019e2:	b2e4      	uxtb	r4, r4
 80019e4:	e7c1      	b.n	800196a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e6:	6904      	ldr	r4, [r0, #16]
 80019e8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80019ec:	d105      	bne.n	80019fa <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80019ee:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80019f2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80019f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80019f6:	d1f2      	bne.n	80019de <HAL_I2C_EV_IRQHandler+0xae>
 80019f8:	e7b5      	b.n	8001966 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 80019fa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80019fc:	b934      	cbnz	r4, 8001a0c <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80019fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a00:	11e4      	asrs	r4, r4, #7
 8001a02:	f004 0406 	and.w	r4, r4, #6
 8001a06:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001a0a:	e7ae      	b.n	800196a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001a0c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001a0e:	2c01      	cmp	r4, #1
 8001a10:	d1ac      	bne.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001a12:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a14:	11e4      	asrs	r4, r4, #7
 8001a16:	f004 0406 	and.w	r4, r4, #6
 8001a1a:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001a1e:	e7a4      	b.n	800196a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001a20:	4c6a      	ldr	r4, [pc, #424]	; (8001bcc <HAL_I2C_EV_IRQHandler+0x29c>)
 8001a22:	400c      	ands	r4, r1
 8001a24:	b11c      	cbz	r4, 8001a2e <HAL_I2C_EV_IRQHandler+0xfe>
 8001a26:	0596      	lsls	r6, r2, #22
 8001a28:	d501      	bpl.n	8001a2e <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001a2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001a2c:	e7d9      	b.n	80019e2 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001a2e:	4c68      	ldr	r4, [pc, #416]	; (8001bd0 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001a30:	400c      	ands	r4, r1
 8001a32:	2c00      	cmp	r4, #0
 8001a34:	d09a      	beq.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
 8001a36:	0594      	lsls	r4, r2, #22
 8001a38:	d598      	bpl.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001a3a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a3e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001a40:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a44:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
 8001a48:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a4a:	2f22      	cmp	r7, #34	; 0x22
 8001a4c:	f040 80af 	bne.w	8001bae <HAL_I2C_EV_IRQHandler+0x27e>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001a50:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001a52:	b947      	cbnz	r7, 8001a66 <HAL_I2C_EV_IRQHandler+0x136>
 8001a54:	2c40      	cmp	r4, #64	; 0x40
 8001a56:	d106      	bne.n	8001a66 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a58:	9700      	str	r7, [sp, #0]
 8001a5a:	695c      	ldr	r4, [r3, #20]
 8001a5c:	9400      	str	r4, [sp, #0]
 8001a5e:	699c      	ldr	r4, [r3, #24]
 8001a60:	9400      	str	r4, [sp, #0]
 8001a62:	9c00      	ldr	r4, [sp, #0]
 8001a64:	e782      	b.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001a66:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001a68:	b98c      	cbnz	r4, 8001a8e <HAL_I2C_EV_IRQHandler+0x15e>
 8001a6a:	6907      	ldr	r7, [r0, #16]
 8001a6c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001a70:	d10d      	bne.n	8001a8e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a72:	9401      	str	r4, [sp, #4]
 8001a74:	695c      	ldr	r4, [r3, #20]
 8001a76:	9401      	str	r4, [sp, #4]
 8001a78:	699c      	ldr	r4, [r3, #24]
 8001a7a:	9401      	str	r4, [sp, #4]
 8001a7c:	9c01      	ldr	r4, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a7e:	681c      	ldr	r4, [r3, #0]
 8001a80:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001a84:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001a86:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001a88:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001a8a:	6504      	str	r4, [r0, #80]	; 0x50
 8001a8c:	e76e      	b.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001a8e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001a90:	b2a4      	uxth	r4, r4
 8001a92:	b954      	cbnz	r4, 8001aaa <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a94:	9402      	str	r4, [sp, #8]
 8001a96:	695c      	ldr	r4, [r3, #20]
 8001a98:	9402      	str	r4, [sp, #8]
 8001a9a:	699c      	ldr	r4, [r3, #24]
 8001a9c:	9402      	str	r4, [sp, #8]
 8001a9e:	9c02      	ldr	r4, [sp, #8]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001aa0:	681c      	ldr	r4, [r3, #0]
 8001aa2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8001aa6:	601c      	str	r4, [r3, #0]
 8001aa8:	e019      	b.n	8001ade <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 8001aaa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001aac:	b2a4      	uxth	r4, r4
 8001aae:	2c01      	cmp	r4, #1
 8001ab0:	d142      	bne.n	8001b38 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8001ab2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8001ab6:	d11b      	bne.n	8001af0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ab8:	681c      	ldr	r4, [r3, #0]
 8001aba:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001abe:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001ac0:	685c      	ldr	r4, [r3, #4]
 8001ac2:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 8001ac6:	d00c      	beq.n	8001ae2 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001ac8:	681c      	ldr	r4, [r3, #0]
 8001aca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001ace:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ad0:	2400      	movs	r4, #0
 8001ad2:	9403      	str	r4, [sp, #12]
 8001ad4:	695c      	ldr	r4, [r3, #20]
 8001ad6:	9403      	str	r4, [sp, #12]
 8001ad8:	699c      	ldr	r4, [r3, #24]
 8001ada:	9403      	str	r4, [sp, #12]
 8001adc:	9c03      	ldr	r4, [sp, #12]
      hi2c->EventCount = 0U;
 8001ade:	2400      	movs	r4, #0
 8001ae0:	e7d3      	b.n	8001a8a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae2:	9404      	str	r4, [sp, #16]
 8001ae4:	695c      	ldr	r4, [r3, #20]
 8001ae6:	9404      	str	r4, [sp, #16]
 8001ae8:	699c      	ldr	r4, [r3, #24]
 8001aea:	9404      	str	r4, [sp, #16]
 8001aec:	9c04      	ldr	r4, [sp, #16]
 8001aee:	e7d7      	b.n	8001aa0 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001af0:	2e04      	cmp	r6, #4
 8001af2:	d015      	beq.n	8001b20 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001af4:	2e08      	cmp	r6, #8
 8001af6:	d013      	beq.n	8001b20 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001af8:	f1be 0f12 	cmp.w	lr, #18
 8001afc:	d010      	beq.n	8001b20 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001afe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b00:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b02:	681c      	ldr	r4, [r3, #0]
 8001b04:	bf14      	ite	ne
 8001b06:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b0a:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001b0e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b10:	2400      	movs	r4, #0
 8001b12:	9405      	str	r4, [sp, #20]
 8001b14:	695c      	ldr	r4, [r3, #20]
 8001b16:	9405      	str	r4, [sp, #20]
 8001b18:	699c      	ldr	r4, [r3, #24]
 8001b1a:	9405      	str	r4, [sp, #20]
 8001b1c:	9c05      	ldr	r4, [sp, #20]
 8001b1e:	e7de      	b.n	8001ade <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b20:	681c      	ldr	r4, [r3, #0]
 8001b22:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001b26:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b28:	2400      	movs	r4, #0
 8001b2a:	9406      	str	r4, [sp, #24]
 8001b2c:	695c      	ldr	r4, [r3, #20]
 8001b2e:	9406      	str	r4, [sp, #24]
 8001b30:	699c      	ldr	r4, [r3, #24]
 8001b32:	9406      	str	r4, [sp, #24]
 8001b34:	9c06      	ldr	r4, [sp, #24]
 8001b36:	e7b3      	b.n	8001aa0 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8001b38:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001b3a:	b2a4      	uxth	r4, r4
 8001b3c:	2c02      	cmp	r4, #2
 8001b3e:	d123      	bne.n	8001b88 <HAL_I2C_EV_IRQHandler+0x258>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001b40:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001b42:	2600      	movs	r6, #0
 8001b44:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b46:	681c      	ldr	r4, [r3, #0]
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001b48:	d014      	beq.n	8001b74 <HAL_I2C_EV_IRQHandler+0x244>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001b4a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8001b4e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b50:	9607      	str	r6, [sp, #28]
 8001b52:	695c      	ldr	r4, [r3, #20]
 8001b54:	9407      	str	r4, [sp, #28]
 8001b56:	699c      	ldr	r4, [r3, #24]
 8001b58:	9407      	str	r4, [sp, #28]
 8001b5a:	9c07      	ldr	r4, [sp, #28]
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001b5c:	681c      	ldr	r4, [r3, #0]
 8001b5e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001b62:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b64:	685c      	ldr	r4, [r3, #4]
 8001b66:	0527      	lsls	r7, r4, #20
 8001b68:	d5b9      	bpl.n	8001ade <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001b6a:	685c      	ldr	r4, [r3, #4]
 8001b6c:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8001b70:	605c      	str	r4, [r3, #4]
 8001b72:	e7b4      	b.n	8001ade <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b74:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001b78:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	9608      	str	r6, [sp, #32]
 8001b7c:	695c      	ldr	r4, [r3, #20]
 8001b7e:	9408      	str	r4, [sp, #32]
 8001b80:	699c      	ldr	r4, [r3, #24]
 8001b82:	9408      	str	r4, [sp, #32]
 8001b84:	9c08      	ldr	r4, [sp, #32]
 8001b86:	e7ed      	b.n	8001b64 <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001b88:	681c      	ldr	r4, [r3, #0]
 8001b8a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001b8e:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001b90:	685c      	ldr	r4, [r3, #4]
 8001b92:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001b94:	bf42      	ittt	mi
 8001b96:	685c      	ldrmi	r4, [r3, #4]
 8001b98:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001b9c:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b9e:	2400      	movs	r4, #0
 8001ba0:	9409      	str	r4, [sp, #36]	; 0x24
 8001ba2:	695c      	ldr	r4, [r3, #20]
 8001ba4:	9409      	str	r4, [sp, #36]	; 0x24
 8001ba6:	699c      	ldr	r4, [r3, #24]
 8001ba8:	9409      	str	r4, [sp, #36]	; 0x24
 8001baa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001bac:	e797      	b.n	8001ade <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bae:	2400      	movs	r4, #0
 8001bb0:	940a      	str	r4, [sp, #40]	; 0x28
 8001bb2:	695c      	ldr	r4, [r3, #20]
 8001bb4:	940a      	str	r4, [sp, #40]	; 0x28
 8001bb6:	699c      	ldr	r4, [r3, #24]
 8001bb8:	940a      	str	r4, [sp, #40]	; 0x28
 8001bba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001bbc:	e6d6      	b.n	800196c <HAL_I2C_EV_IRQHandler+0x3c>
 8001bbe:	bf00      	nop
 8001bc0:	00100004 	.word	0x00100004
 8001bc4:	00010004 	.word	0x00010004
 8001bc8:	00010080 	.word	0x00010080
 8001bcc:	00010008 	.word	0x00010008
 8001bd0:	00010002 	.word	0x00010002
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001bd4:	2a21      	cmp	r2, #33	; 0x21
 8001bd6:	d003      	beq.n	8001be0 <HAL_I2C_EV_IRQHandler+0x2b0>
 8001bd8:	2940      	cmp	r1, #64	; 0x40
 8001bda:	d118      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001bdc:	2a22      	cmp	r2, #34	; 0x22
 8001bde:	d116      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount == 0U)
 8001be0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001be2:	b292      	uxth	r2, r2
 8001be4:	b922      	cbnz	r2, 8001bf0 <HAL_I2C_EV_IRQHandler+0x2c0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	e00e      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001bf0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001bf4:	2a40      	cmp	r2, #64	; 0x40
 8001bf6:	d128      	bne.n	8001c4a <HAL_I2C_EV_IRQHandler+0x31a>
        if(hi2c->EventCount == 0)
 8001bf8:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001bfa:	b982      	cbnz	r2, 8001c1e <HAL_I2C_EV_IRQHandler+0x2ee>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001bfc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001bfe:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c00:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001c02:	d106      	bne.n	8001c12 <HAL_I2C_EV_IRQHandler+0x2e2>
 8001c04:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c06:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8001c08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c0a:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001c0c:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001c0e:	b00d      	add	sp, #52	; 0x34
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001c12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c16:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001c18:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	e7f6      	b.n	8001c0c <HAL_I2C_EV_IRQHandler+0x2dc>
        else if(hi2c->EventCount == 1)
 8001c1e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001c20:	2a01      	cmp	r2, #1
 8001c22:	d102      	bne.n	8001c2a <HAL_I2C_EV_IRQHandler+0x2fa>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001c24:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	e7f5      	b.n	8001c16 <HAL_I2C_EV_IRQHandler+0x2e6>
        else if(hi2c->EventCount == 2)
 8001c2a:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001c2c:	2a02      	cmp	r2, #2
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001c30:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001c34:	2a22      	cmp	r2, #34	; 0x22
 8001c36:	d104      	bne.n	8001c42 <HAL_I2C_EV_IRQHandler+0x312>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e7e5      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c42:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001c46:	2a21      	cmp	r2, #33	; 0x21
 8001c48:	d1e1      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001c4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001c4c:	1c51      	adds	r1, r2, #1
 8001c4e:	6241      	str	r1, [r0, #36]	; 0x24
 8001c50:	7812      	ldrb	r2, [r2, #0]
 8001c52:	611a      	str	r2, [r3, #16]
 8001c54:	e099      	b.n	8001d8a <HAL_I2C_EV_IRQHandler+0x45a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001c56:	2c00      	cmp	r4, #0
 8001c58:	d0d9      	beq.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001c5a:	0594      	lsls	r4, r2, #22
 8001c5c:	d5d7      	bpl.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001c64:	2a21      	cmp	r2, #33	; 0x21
 8001c66:	d1d2      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount != 0U)
 8001c68:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001c6a:	b292      	uxth	r2, r2
 8001c6c:	2a00      	cmp	r2, #0
 8001c6e:	d1ec      	bne.n	8001c4a <HAL_I2C_EV_IRQHandler+0x31a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c70:	2904      	cmp	r1, #4
 8001c72:	d00d      	beq.n	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
 8001c74:	2908      	cmp	r1, #8
 8001c76:	d00b      	beq.n	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
 8001c78:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001c7c:	d008      	beq.n	8001c90 <HAL_I2C_EV_IRQHandler+0x360>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c7e:	6859      	ldr	r1, [r3, #4]
 8001c80:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001c84:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c86:	2311      	movs	r3, #17
 8001c88:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8001c8e:	e69f      	b.n	80019d0 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c96:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ca4:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001caa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cb2:	2a40      	cmp	r2, #64	; 0x40
 8001cb4:	f47f ae8f 	bne.w	80019d6 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001cb8:	f7ff fda2 	bl	8001800 <HAL_I2C_MemTxCpltCallback>
 8001cbc:	e7a7      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001cbe:	4d8f      	ldr	r5, [pc, #572]	; (8001efc <HAL_I2C_EV_IRQHandler+0x5cc>)
 8001cc0:	400d      	ands	r5, r1
 8001cc2:	2d00      	cmp	r5, #0
 8001cc4:	d046      	beq.n	8001d54 <HAL_I2C_EV_IRQHandler+0x424>
 8001cc6:	0551      	lsls	r1, r2, #21
 8001cc8:	d544      	bpl.n	8001d54 <HAL_I2C_EV_IRQHandler+0x424>
 8001cca:	2c00      	cmp	r4, #0
 8001ccc:	d142      	bne.n	8001d54 <HAL_I2C_EV_IRQHandler+0x424>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cce:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001cd2:	2a22      	cmp	r2, #34	; 0x22
 8001cd4:	d19b      	bne.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    tmp = hi2c->XferCount;
 8001cd6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001cd8:	b292      	uxth	r2, r2
    if(tmp > 3U)
 8001cda:	2a03      	cmp	r2, #3
 8001cdc:	d905      	bls.n	8001cea <HAL_I2C_EV_IRQHandler+0x3ba>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001cde:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	1c51      	adds	r1, r2, #1
 8001ce4:	6241      	str	r1, [r0, #36]	; 0x24
 8001ce6:	7013      	strb	r3, [r2, #0]
 8001ce8:	e04f      	b.n	8001d8a <HAL_I2C_EV_IRQHandler+0x45a>
    else if((tmp == 2U) || (tmp == 3U))
 8001cea:	3a02      	subs	r2, #2
 8001cec:	2a01      	cmp	r2, #1
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001cee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    else if((tmp == 2U) || (tmp == 3U))
 8001cf0:	d80d      	bhi.n	8001d0e <HAL_I2C_EV_IRQHandler+0x3de>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001cf2:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	bf1d      	ittte	ne
 8001cf8:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
 8001cfc:	601a      	strne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001cfe:	681a      	ldrne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d00:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001d04:	bf18      	it	ne
 8001d06:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	e76b      	b.n	8001be6 <HAL_I2C_EV_IRQHandler+0x2b6>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001d0e:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	bf14      	ite	ne
 8001d14:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001d18:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8001d1c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d24:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d26:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	1c51      	adds	r1, r2, #1
 8001d2c:	6241      	str	r1, [r0, #36]	; 0x24
 8001d2e:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001d30:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d42:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d4a:	2a40      	cmp	r2, #64	; 0x40
 8001d4c:	d151      	bne.n	8001df2 <HAL_I2C_EV_IRQHandler+0x4c2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001d4e:	f7ff fd58 	bl	8001802 <HAL_I2C_MemRxCpltCallback>
 8001d52:	e75c      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001d54:	2c00      	cmp	r4, #0
 8001d56:	f43f af5a 	beq.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001d5a:	0597      	lsls	r7, r2, #22
 8001d5c:	f57f af57 	bpl.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 8001d62:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001d64:	b289      	uxth	r1, r1
 8001d66:	2903      	cmp	r1, #3
 8001d68:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001d6a:	d113      	bne.n	8001d94 <HAL_I2C_EV_IRQHandler+0x464>
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d6c:	2a04      	cmp	r2, #4
 8001d6e:	d004      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x44a>
 8001d70:	2a08      	cmp	r2, #8
 8001d72:	d002      	beq.n	8001d7a <HAL_I2C_EV_IRQHandler+0x44a>
 8001d74:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d78:	d103      	bne.n	8001d82 <HAL_I2C_EV_IRQHandler+0x452>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	1c4a      	adds	r2, r1, #1
 8001d86:	6242      	str	r2, [r0, #36]	; 0x24
 8001d88:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001d8a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 8001d92:	e73c      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
  else if(hi2c->XferCount == 2U)
 8001d94:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001d96:	b2a4      	uxth	r4, r4
 8001d98:	2c02      	cmp	r4, #2
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_I2C_EV_IRQHandler+0x452>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d9c:	2a04      	cmp	r2, #4
 8001d9e:	d01f      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8001da0:	2a08      	cmp	r2, #8
 8001da2:	d01d      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x4b0>
 8001da4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001da8:	d01a      	beq.n	8001de0 <HAL_I2C_EV_IRQHandler+0x4b0>
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 8001daa:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	bf14      	ite	ne
 8001db0:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001db4:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8001db8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001dc0:	605a      	str	r2, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	1c4a      	adds	r2, r1, #1
 8001dc6:	6242      	str	r2, [r0, #36]	; 0x24
 8001dc8:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001dca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001dd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	6242      	str	r2, [r0, #36]	; 0x24
 8001dd8:	6802      	ldr	r2, [r0, #0]
 8001dda:	6912      	ldr	r2, [r2, #16]
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e7a7      	b.n	8001d30 <HAL_I2C_EV_IRQHandler+0x400>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001de6:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e7e7      	b.n	8001dc2 <HAL_I2C_EV_IRQHandler+0x492>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001df2:	f7ff fd00 	bl	80017f6 <HAL_I2C_MasterRxCpltCallback>
 8001df6:	e70a      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001df8:	4c41      	ldr	r4, [pc, #260]	; (8001f00 <HAL_I2C_EV_IRQHandler+0x5d0>)
 8001dfa:	400c      	ands	r4, r1
 8001dfc:	b174      	cbz	r4, 8001e1c <HAL_I2C_EV_IRQHandler+0x4ec>
 8001dfe:	0596      	lsls	r6, r2, #22
 8001e00:	d50c      	bpl.n	8001e1c <HAL_I2C_EV_IRQHandler+0x4ec>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001e02:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001e04:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001e06:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001e0a:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001e0c:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001e10:	bf54      	ite	pl
 8001e12:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001e14:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001e16:	f7ff fcf1 	bl	80017fc <HAL_I2C_AddrCallback>
 8001e1a:	e6f8      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001e1c:	4c39      	ldr	r4, [pc, #228]	; (8001f04 <HAL_I2C_EV_IRQHandler+0x5d4>)
 8001e1e:	400c      	ands	r4, r1
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d073      	beq.n	8001f0c <HAL_I2C_EV_IRQHandler+0x5dc>
 8001e24:	0594      	lsls	r4, r2, #22
 8001e26:	d571      	bpl.n	8001f0c <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8001e28:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e2c:	6859      	ldr	r1, [r3, #4]
  uint32_t CurrentState = hi2c->State;
 8001e2e:	b2d2      	uxtb	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e30:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001e34:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001e36:	2100      	movs	r1, #0
 8001e38:	910b      	str	r1, [sp, #44]	; 0x2c
 8001e3a:	6959      	ldr	r1, [r3, #20]
 8001e3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8001e3e:	6819      	ldr	r1, [r3, #0]
 8001e40:	f041 0101 	orr.w	r1, r1, #1
 8001e44:	6019      	str	r1, [r3, #0]
 8001e46:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001e4e:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001e50:	6859      	ldr	r1, [r3, #4]
 8001e52:	0509      	lsls	r1, r1, #20
 8001e54:	d50c      	bpl.n	8001e70 <HAL_I2C_EV_IRQHandler+0x540>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001e56:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001e5a:	2922      	cmp	r1, #34	; 0x22
 8001e5c:	d003      	beq.n	8001e66 <HAL_I2C_EV_IRQHandler+0x536>
 8001e5e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001e62:	292a      	cmp	r1, #42	; 0x2a
 8001e64:	d129      	bne.n	8001eba <HAL_I2C_EV_IRQHandler+0x58a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001e66:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001e68:	6809      	ldr	r1, [r1, #0]
 8001e6a:	6849      	ldr	r1, [r1, #4]
 8001e6c:	b289      	uxth	r1, r1
 8001e6e:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8001e70:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001e72:	b289      	uxth	r1, r1
 8001e74:	b1e1      	cbz	r1, 8001eb0 <HAL_I2C_EV_IRQHandler+0x580>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e76:	6959      	ldr	r1, [r3, #20]
 8001e78:	074f      	lsls	r7, r1, #29
 8001e7a:	d508      	bpl.n	8001e8e <HAL_I2C_EV_IRQHandler+0x55e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e7c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	1c4c      	adds	r4, r1, #1
 8001e82:	6244      	str	r4, [r0, #36]	; 0x24
 8001e84:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8001e86:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001e8e:	6801      	ldr	r1, [r0, #0]
 8001e90:	694b      	ldr	r3, [r1, #20]
 8001e92:	065e      	lsls	r6, r3, #25
 8001e94:	d508      	bpl.n	8001ea8 <HAL_I2C_EV_IRQHandler+0x578>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001e96:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001e98:	6909      	ldr	r1, [r1, #16]
 8001e9a:	1c5c      	adds	r4, r3, #1
 8001e9c:	6244      	str	r4, [r0, #36]	; 0x24
 8001e9e:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 8001ea0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ea8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001eb2:	b123      	cbz	r3, 8001ebe <HAL_I2C_EV_IRQHandler+0x58e>
    I2C_ITError(hi2c);
 8001eb4:	f7ff fca8 	bl	8001808 <I2C_ITError>
 8001eb8:	e6a9      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001eba:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001ebc:	e7d4      	b.n	8001e68 <HAL_I2C_EV_IRQHandler+0x538>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8001ebe:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 8001ec2:	2902      	cmp	r1, #2
 8001ec4:	d80a      	bhi.n	8001edc <HAL_I2C_EV_IRQHandler+0x5ac>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ec6:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_I2C_EV_IRQHandler+0x5d8>)
 8001ec8:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8001eca:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8001ecc:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ece:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001ed6:	f7ff fc92 	bl	80017fe <HAL_I2C_ListenCpltCallback>
 8001eda:	e698      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001edc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ede:	2b22      	cmp	r3, #34	; 0x22
 8001ee0:	d002      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x5b8>
 8001ee2:	2a22      	cmp	r2, #34	; 0x22
 8001ee4:	f47f ae93 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8001eec:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ef6:	f7ff fc80 	bl	80017fa <HAL_I2C_SlaveRxCpltCallback>
 8001efa:	e688      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001efc:	00010040 	.word	0x00010040
 8001f00:	00010002 	.word	0x00010002
 8001f04:	00010010 	.word	0x00010010
 8001f08:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001f0c:	4e39      	ldr	r6, [pc, #228]	; (8001ff4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 8001f0e:	4c3a      	ldr	r4, [pc, #232]	; (8001ff8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8001f10:	402e      	ands	r6, r5
 8001f12:	400c      	ands	r4, r1
 8001f14:	2e00      	cmp	r6, #0
 8001f16:	d036      	beq.n	8001f86 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001f18:	4d38      	ldr	r5, [pc, #224]	; (8001ffc <HAL_I2C_EV_IRQHandler+0x6cc>)
 8001f1a:	400d      	ands	r5, r1
 8001f1c:	b33d      	cbz	r5, 8001f6e <HAL_I2C_EV_IRQHandler+0x63e>
 8001f1e:	0555      	lsls	r5, r2, #21
 8001f20:	d525      	bpl.n	8001f6e <HAL_I2C_EV_IRQHandler+0x63e>
 8001f22:	bb24      	cbnz	r4, 8001f6e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8001f24:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001f28:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 8001f2a:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	2a00      	cmp	r2, #0
 8001f30:	f43f ae6d 	beq.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001f34:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f36:	1c54      	adds	r4, r2, #1
 8001f38:	6244      	str	r4, [r0, #36]	; 0x24
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001f3e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f40:	3a01      	subs	r2, #1
 8001f42:	b292      	uxth	r2, r2
 8001f44:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f46:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f48:	b292      	uxth	r2, r2
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	f47f ae5f 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001f50:	2929      	cmp	r1, #41	; 0x29
 8001f52:	f47f ae5c 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f5c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f5e:	2321      	movs	r3, #33	; 0x21
 8001f60:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f62:	2328      	movs	r3, #40	; 0x28
 8001f64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001f68:	f7ff fc46 	bl	80017f8 <HAL_I2C_SlaveTxCpltCallback>
 8001f6c:	e64f      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001f6e:	2c00      	cmp	r4, #0
 8001f70:	f43f ae4d 	beq.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001f74:	0594      	lsls	r4, r2, #22
 8001f76:	f57f ae4a 	bpl.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 8001f7a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f7c:	b292      	uxth	r2, r2
 8001f7e:	2a00      	cmp	r2, #0
 8001f80:	f47f ae63 	bne.w	8001c4a <HAL_I2C_EV_IRQHandler+0x31a>
 8001f84:	e643      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001f86:	4d1e      	ldr	r5, [pc, #120]	; (8002000 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8001f88:	400d      	ands	r5, r1
 8001f8a:	b335      	cbz	r5, 8001fda <HAL_I2C_EV_IRQHandler+0x6aa>
 8001f8c:	0551      	lsls	r1, r2, #21
 8001f8e:	d524      	bpl.n	8001fda <HAL_I2C_EV_IRQHandler+0x6aa>
 8001f90:	bb1c      	cbnz	r4, 8001fda <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8001f92:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001f96:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 8001f98:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 8001f9a:	b289      	uxth	r1, r1
 8001f9c:	2900      	cmp	r1, #0
 8001f9e:	f43f ae36 	beq.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001fa2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	1c4c      	adds	r4, r1, #1
 8001fa8:	6244      	str	r4, [r0, #36]	; 0x24
 8001faa:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001fac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001fb4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae28 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001fbe:	2a2a      	cmp	r2, #42	; 0x2a
 8001fc0:	f47f ae25 	bne.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fc4:	6802      	ldr	r2, [r0, #0]
 8001fc6:	6853      	ldr	r3, [r2, #4]
 8001fc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fcc:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001fce:	2322      	movs	r3, #34	; 0x22
 8001fd0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001fd2:	2328      	movs	r3, #40	; 0x28
 8001fd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001fd8:	e78d      	b.n	8001ef6 <HAL_I2C_EV_IRQHandler+0x5c6>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001fda:	2c00      	cmp	r4, #0
 8001fdc:	f43f ae17 	beq.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001fe0:	0592      	lsls	r2, r2, #22
 8001fe2:	f57f ae14 	bpl.w	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 8001fe6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001fe8:	b292      	uxth	r2, r2
 8001fea:	2a00      	cmp	r2, #0
 8001fec:	f47f ae77 	bne.w	8001cde <HAL_I2C_EV_IRQHandler+0x3ae>
 8001ff0:	e60d      	b.n	8001c0e <HAL_I2C_EV_IRQHandler+0x2de>
 8001ff2:	bf00      	nop
 8001ff4:	00100004 	.word	0x00100004
 8001ff8:	00010004 	.word	0x00010004
 8001ffc:	00010080 	.word	0x00010080
 8002000:	00010040 	.word	0x00010040

08002004 <HAL_I2C_ER_IRQHandler>:
{
 8002004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002006:	6803      	ldr	r3, [r0, #0]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002008:	4a4b      	ldr	r2, [pc, #300]	; (8002138 <HAL_I2C_ER_IRQHandler+0x134>)
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800200a:	695e      	ldr	r6, [r3, #20]
{
 800200c:	4604      	mov	r4, r0
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800200e:	4216      	tst	r6, r2
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002010:	685d      	ldr	r5, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002012:	d00c      	beq.n	800202e <HAL_I2C_ER_IRQHandler+0x2a>
 8002014:	05e8      	lsls	r0, r5, #23
 8002016:	d50a      	bpl.n	800202e <HAL_I2C_ER_IRQHandler+0x2a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002018:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002020:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002024:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202c:	601a      	str	r2, [r3, #0]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800202e:	f416 3f81 	tst.w	r6, #66048	; 0x10200
 8002032:	d008      	beq.n	8002046 <HAL_I2C_ER_IRQHandler+0x42>
 8002034:	05e9      	lsls	r1, r5, #23
 8002036:	d506      	bpl.n	8002046 <HAL_I2C_ER_IRQHandler+0x42>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002038:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	6422      	str	r2, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002040:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002044:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8002046:	f416 3f82 	tst.w	r6, #66560	; 0x10400
 800204a:	d036      	beq.n	80020ba <HAL_I2C_ER_IRQHandler+0xb6>
 800204c:	05ea      	lsls	r2, r5, #23
 800204e:	d534      	bpl.n	80020ba <HAL_I2C_ER_IRQHandler+0xb6>
    tmp1 = hi2c->Mode;
 8002050:	f894 703e 	ldrb.w	r7, [r4, #62]	; 0x3e
    tmp2 = hi2c->XferCount;
 8002054:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
    tmp3 = hi2c->State;
 8002056:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800205a:	2f20      	cmp	r7, #32
    tmp2 = hi2c->XferCount;
 800205c:	b289      	uxth	r1, r1
    tmp3 = hi2c->State;
 800205e:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8002060:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002062:	d158      	bne.n	8002116 <HAL_I2C_ER_IRQHandler+0x112>
 8002064:	2900      	cmp	r1, #0
 8002066:	d156      	bne.n	8002116 <HAL_I2C_ER_IRQHandler+0x112>
 8002068:	f002 01f7 	and.w	r1, r2, #247	; 0xf7
 800206c:	2921      	cmp	r1, #33	; 0x21
 800206e:	d003      	beq.n	8002078 <HAL_I2C_ER_IRQHandler+0x74>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002070:	2a28      	cmp	r2, #40	; 0x28
 8002072:	d150      	bne.n	8002116 <HAL_I2C_ER_IRQHandler+0x112>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002074:	2821      	cmp	r0, #33	; 0x21
 8002076:	d14e      	bne.n	8002116 <HAL_I2C_ER_IRQHandler+0x112>
  uint32_t CurrentState       = hi2c->State;
 8002078:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800207c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 800207e:	b2d2      	uxtb	r2, r2
  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002080:	2904      	cmp	r1, #4
 8002082:	d001      	beq.n	8002088 <HAL_I2C_ER_IRQHandler+0x84>
 8002084:	2908      	cmp	r1, #8
 8002086:	d12c      	bne.n	80020e2 <HAL_I2C_ER_IRQHandler+0xde>
 8002088:	2a28      	cmp	r2, #40	; 0x28
 800208a:	d12a      	bne.n	80020e2 <HAL_I2C_ER_IRQHandler+0xde>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_ListenCpltCallback(hi2c);
 800208e:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002090:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002098:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800209e:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a6:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 80020a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ac:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 80020b6:	f7ff fba2 	bl	80017fe <HAL_I2C_ListenCpltCallback>
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 80020ba:	f416 3f84 	tst.w	r6, #67584	; 0x10800
 80020be:	d009      	beq.n	80020d4 <HAL_I2C_ER_IRQHandler+0xd0>
 80020c0:	05eb      	lsls	r3, r5, #23
 80020c2:	d507      	bpl.n	80020d4 <HAL_I2C_ER_IRQHandler+0xd0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020c4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80020c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020d6:	b373      	cbz	r3, 8002136 <HAL_I2C_ER_IRQHandler+0x132>
    I2C_ITError(hi2c);
 80020d8:	4620      	mov	r0, r4
}
 80020da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80020de:	f7ff bb93 	b.w	8001808 <I2C_ITError>
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020e2:	2a21      	cmp	r2, #33	; 0x21
 80020e4:	d123      	bne.n	800212e <HAL_I2C_ER_IRQHandler+0x12a>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020e6:	4915      	ldr	r1, [pc, #84]	; (800213c <HAL_I2C_ER_IRQHandler+0x138>)
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020e8:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ea:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80020ec:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	2220      	movs	r2, #32
 80020f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	2200      	movs	r2, #0
 80020f6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002100:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002106:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800210e:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002110:	f7ff fb72 	bl	80017f8 <HAL_I2C_SlaveTxCpltCallback>
 8002114:	e7d1      	b.n	80020ba <HAL_I2C_ER_IRQHandler+0xb6>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002116:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002118:	f042 0204 	orr.w	r2, r2, #4
 800211c:	6422      	str	r2, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 800211e:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002122:	2a10      	cmp	r2, #16
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 8002124:	bf02      	ittt	eq
 8002126:	681a      	ldreq	r2, [r3, #0]
 8002128:	f442 7200 	orreq.w	r2, r2, #512	; 0x200
 800212c:	601a      	streq	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800212e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002132:	615a      	str	r2, [r3, #20]
 8002134:	e7c1      	b.n	80020ba <HAL_I2C_ER_IRQHandler+0xb6>
 8002136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002138:	00010100 	.word	0x00010100
 800213c:	ffff0000 	.word	0xffff0000

08002140 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002140:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8002142:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002144:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002146:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214e:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8002150:	2200      	movs	r2, #0
 8002152:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002154:	634a      	str	r2, [r1, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002156:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002158:	634a      	str	r2, [r1, #52]	; 0x34
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800215a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800215e:	2960      	cmp	r1, #96	; 0x60
 8002160:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002164:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002168:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800216c:	d107      	bne.n	800217e <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216e:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	f022 0201 	bic.w	r2, r2, #1
 8002176:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002178:	f7ff fb45 	bl	8001806 <HAL_I2C_AbortCpltCallback>
 800217c:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	f022 0201 	bic.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8002186:	f7ff fb3d 	bl	8001804 <HAL_I2C_ErrorCallback>
 800218a:	bd08      	pop	{r3, pc}

0800218c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218c:	6803      	ldr	r3, [r0, #0]
{
 800218e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	07db      	lsls	r3, r3, #31
{
 8002194:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	d410      	bmi.n	80021ba <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002198:	682b      	ldr	r3, [r5, #0]
 800219a:	079f      	lsls	r7, r3, #30
 800219c:	d45e      	bmi.n	800225c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	0719      	lsls	r1, r3, #28
 80021a2:	f100 8095 	bmi.w	80022d0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a6:	682b      	ldr	r3, [r5, #0]
 80021a8:	075a      	lsls	r2, r3, #29
 80021aa:	f100 80bf 	bmi.w	800232c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ae:	69ea      	ldr	r2, [r5, #28]
 80021b0:	2a00      	cmp	r2, #0
 80021b2:	f040 812d 	bne.w	8002410 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80021b6:	2000      	movs	r0, #0
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021ba:	4c90      	ldr	r4, [pc, #576]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c6:	6863      	ldr	r3, [r4, #4]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x5e>
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	03de      	lsls	r6, r3, #15
 80021d4:	d509      	bpl.n	80021ea <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	6823      	ldr	r3, [r4, #0]
 80021d8:	039c      	lsls	r4, r3, #14
 80021da:	d5dd      	bpl.n	8002198 <HAL_RCC_OscConfig+0xc>
 80021dc:	686b      	ldr	r3, [r5, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1da      	bne.n	8002198 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80021e2:	2001      	movs	r0, #1
}
 80021e4:	b002      	add	sp, #8
 80021e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ea:	686b      	ldr	r3, [r5, #4]
 80021ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f0:	d110      	bne.n	8002214 <HAL_RCC_OscConfig+0x88>
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021fa:	f7fe fc7d 	bl	8000af8 <HAL_GetTick>
 80021fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	0398      	lsls	r0, r3, #14
 8002204:	d4c8      	bmi.n	8002198 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002206:	f7fe fc77 	bl	8000af8 <HAL_GetTick>
 800220a:	1b80      	subs	r0, r0, r6
 800220c:	2864      	cmp	r0, #100	; 0x64
 800220e:	d9f7      	bls.n	8002200 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002210:	2003      	movs	r0, #3
 8002212:	e7e7      	b.n	80021e4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002214:	b99b      	cbnz	r3, 800223e <HAL_RCC_OscConfig+0xb2>
 8002216:	6823      	ldr	r3, [r4, #0]
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6023      	str	r3, [r4, #0]
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002226:	f7fe fc67 	bl	8000af8 <HAL_GetTick>
 800222a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222c:	6823      	ldr	r3, [r4, #0]
 800222e:	0399      	lsls	r1, r3, #14
 8002230:	d5b2      	bpl.n	8002198 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002232:	f7fe fc61 	bl	8000af8 <HAL_GetTick>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	2864      	cmp	r0, #100	; 0x64
 800223a:	d9f7      	bls.n	800222c <HAL_RCC_OscConfig+0xa0>
 800223c:	e7e8      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	d103      	bne.n	800224e <HAL_RCC_OscConfig+0xc2>
 8002246:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800224a:	6023      	str	r3, [r4, #0]
 800224c:	e7d1      	b.n	80021f2 <HAL_RCC_OscConfig+0x66>
 800224e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002252:	6023      	str	r3, [r4, #0]
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	e7cd      	b.n	80021f8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800225c:	4c67      	ldr	r4, [pc, #412]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800225e:	6863      	ldr	r3, [r4, #4]
 8002260:	f013 0f0c 	tst.w	r3, #12
 8002264:	d007      	beq.n	8002276 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002266:	6863      	ldr	r3, [r4, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d110      	bne.n	8002292 <HAL_RCC_OscConfig+0x106>
 8002270:	6863      	ldr	r3, [r4, #4]
 8002272:	03da      	lsls	r2, r3, #15
 8002274:	d40d      	bmi.n	8002292 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	079b      	lsls	r3, r3, #30
 800227a:	d502      	bpl.n	8002282 <HAL_RCC_OscConfig+0xf6>
 800227c:	692b      	ldr	r3, [r5, #16]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d1af      	bne.n	80021e2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	696a      	ldr	r2, [r5, #20]
 8002286:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800228a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800228e:	6023      	str	r3, [r4, #0]
 8002290:	e785      	b.n	800219e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002292:	692a      	ldr	r2, [r5, #16]
 8002294:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <HAL_RCC_OscConfig+0x274>)
 8002296:	b16a      	cbz	r2, 80022b4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8002298:	2201      	movs	r2, #1
 800229a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800229c:	f7fe fc2c 	bl	8000af8 <HAL_GetTick>
 80022a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	079f      	lsls	r7, r3, #30
 80022a6:	d4ec      	bmi.n	8002282 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe fc26 	bl	8000af8 <HAL_GetTick>
 80022ac:	1b80      	subs	r0, r0, r6
 80022ae:	2802      	cmp	r0, #2
 80022b0:	d9f7      	bls.n	80022a2 <HAL_RCC_OscConfig+0x116>
 80022b2:	e7ad      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80022b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022b6:	f7fe fc1f 	bl	8000af8 <HAL_GetTick>
 80022ba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022bc:	6823      	ldr	r3, [r4, #0]
 80022be:	0798      	lsls	r0, r3, #30
 80022c0:	f57f af6d 	bpl.w	800219e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c4:	f7fe fc18 	bl	8000af8 <HAL_GetTick>
 80022c8:	1b80      	subs	r0, r0, r6
 80022ca:	2802      	cmp	r0, #2
 80022cc:	d9f6      	bls.n	80022bc <HAL_RCC_OscConfig+0x130>
 80022ce:	e79f      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d0:	69aa      	ldr	r2, [r5, #24]
 80022d2:	4c4a      	ldr	r4, [pc, #296]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x278>)
 80022d6:	b1da      	cbz	r2, 8002310 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022dc:	f7fe fc0c 	bl	8000af8 <HAL_GetTick>
 80022e0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022e4:	079b      	lsls	r3, r3, #30
 80022e6:	d50d      	bpl.n	8002304 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80022ec:	4b46      	ldr	r3, [pc, #280]	; (8002408 <HAL_RCC_OscConfig+0x27c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80022f4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80022f6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80022f8:	9b01      	ldr	r3, [sp, #4]
 80022fa:	1e5a      	subs	r2, r3, #1
 80022fc:	9201      	str	r2, [sp, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f9      	bne.n	80022f6 <HAL_RCC_OscConfig+0x16a>
 8002302:	e750      	b.n	80021a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002304:	f7fe fbf8 	bl	8000af8 <HAL_GetTick>
 8002308:	1b80      	subs	r0, r0, r6
 800230a:	2802      	cmp	r0, #2
 800230c:	d9e9      	bls.n	80022e2 <HAL_RCC_OscConfig+0x156>
 800230e:	e77f      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8002310:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002312:	f7fe fbf1 	bl	8000af8 <HAL_GetTick>
 8002316:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800231a:	079f      	lsls	r7, r3, #30
 800231c:	f57f af43 	bpl.w	80021a6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7fe fbea 	bl	8000af8 <HAL_GetTick>
 8002324:	1b80      	subs	r0, r0, r6
 8002326:	2802      	cmp	r0, #2
 8002328:	d9f6      	bls.n	8002318 <HAL_RCC_OscConfig+0x18c>
 800232a:	e771      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232c:	4c33      	ldr	r4, [pc, #204]	; (80023fc <HAL_RCC_OscConfig+0x270>)
 800232e:	69e3      	ldr	r3, [r4, #28]
 8002330:	00d8      	lsls	r0, r3, #3
 8002332:	d424      	bmi.n	800237e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8002334:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	69e3      	ldr	r3, [r4, #28]
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	61e3      	str	r3, [r4, #28]
 800233e:	69e3      	ldr	r3, [r4, #28]
 8002340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4e30      	ldr	r6, [pc, #192]	; (800240c <HAL_RCC_OscConfig+0x280>)
 800234a:	6833      	ldr	r3, [r6, #0]
 800234c:	05d9      	lsls	r1, r3, #23
 800234e:	d518      	bpl.n	8002382 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002350:	68eb      	ldr	r3, [r5, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d126      	bne.n	80023a4 <HAL_RCC_OscConfig+0x218>
 8002356:	6a23      	ldr	r3, [r4, #32]
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800235e:	f7fe fbcb 	bl	8000af8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002366:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	6a23      	ldr	r3, [r4, #32]
 800236a:	079b      	lsls	r3, r3, #30
 800236c:	d53f      	bpl.n	80023ee <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800236e:	2f00      	cmp	r7, #0
 8002370:	f43f af1d 	beq.w	80021ae <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002374:	69e3      	ldr	r3, [r4, #28]
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	61e3      	str	r3, [r4, #28]
 800237c:	e717      	b.n	80021ae <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2700      	movs	r7, #0
 8002380:	e7e2      	b.n	8002348 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002382:	6833      	ldr	r3, [r6, #0]
 8002384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002388:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800238a:	f7fe fbb5 	bl	8000af8 <HAL_GetTick>
 800238e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002390:	6833      	ldr	r3, [r6, #0]
 8002392:	05da      	lsls	r2, r3, #23
 8002394:	d4dc      	bmi.n	8002350 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002396:	f7fe fbaf 	bl	8000af8 <HAL_GetTick>
 800239a:	eba0 0008 	sub.w	r0, r0, r8
 800239e:	2864      	cmp	r0, #100	; 0x64
 80023a0:	d9f6      	bls.n	8002390 <HAL_RCC_OscConfig+0x204>
 80023a2:	e735      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	b9ab      	cbnz	r3, 80023d2 <HAL_RCC_OscConfig+0x246>
 80023a6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6223      	str	r3, [r4, #32]
 80023b2:	6a23      	ldr	r3, [r4, #32]
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80023ba:	f7fe fb9d 	bl	8000af8 <HAL_GetTick>
 80023be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c0:	6a23      	ldr	r3, [r4, #32]
 80023c2:	0798      	lsls	r0, r3, #30
 80023c4:	d5d3      	bpl.n	800236e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fb97 	bl	8000af8 <HAL_GetTick>
 80023ca:	1b80      	subs	r0, r0, r6
 80023cc:	4540      	cmp	r0, r8
 80023ce:	d9f7      	bls.n	80023c0 <HAL_RCC_OscConfig+0x234>
 80023d0:	e71e      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	6a23      	ldr	r3, [r4, #32]
 80023d6:	d103      	bne.n	80023e0 <HAL_RCC_OscConfig+0x254>
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6223      	str	r3, [r4, #32]
 80023de:	e7ba      	b.n	8002356 <HAL_RCC_OscConfig+0x1ca>
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6223      	str	r3, [r4, #32]
 80023e6:	6a23      	ldr	r3, [r4, #32]
 80023e8:	f023 0304 	bic.w	r3, r3, #4
 80023ec:	e7b6      	b.n	800235c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe fb83 	bl	8000af8 <HAL_GetTick>
 80023f2:	eba0 0008 	sub.w	r0, r0, r8
 80023f6:	42b0      	cmp	r0, r6
 80023f8:	d9b6      	bls.n	8002368 <HAL_RCC_OscConfig+0x1dc>
 80023fa:	e709      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
 80023fc:	40021000 	.word	0x40021000
 8002400:	42420000 	.word	0x42420000
 8002404:	42420480 	.word	0x42420480
 8002408:	20000008 	.word	0x20000008
 800240c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002410:	4c22      	ldr	r4, [pc, #136]	; (800249c <HAL_RCC_OscConfig+0x310>)
 8002412:	6863      	ldr	r3, [r4, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	f43f aee2 	beq.w	80021e2 <HAL_RCC_OscConfig+0x56>
 800241e:	2300      	movs	r3, #0
 8002420:	4e1f      	ldr	r6, [pc, #124]	; (80024a0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002422:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002424:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	d12b      	bne.n	8002480 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8002428:	f7fe fb66 	bl	8000af8 <HAL_GetTick>
 800242c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	0199      	lsls	r1, r3, #6
 8002432:	d41f      	bmi.n	8002474 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002434:	6a2b      	ldr	r3, [r5, #32]
 8002436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243c:	6862      	ldr	r2, [r4, #4]
 800243e:	68a9      	ldr	r1, [r5, #8]
 8002440:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002444:	430a      	orrs	r2, r1
 8002446:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002448:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800244a:	6862      	ldr	r2, [r4, #4]
 800244c:	430b      	orrs	r3, r1
 800244e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002452:	4313      	orrs	r3, r2
 8002454:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002456:	2301      	movs	r3, #1
 8002458:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800245a:	f7fe fb4d 	bl	8000af8 <HAL_GetTick>
 800245e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	019a      	lsls	r2, r3, #6
 8002464:	f53f aea7 	bmi.w	80021b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fb46 	bl	8000af8 <HAL_GetTick>
 800246c:	1b40      	subs	r0, r0, r5
 800246e:	2802      	cmp	r0, #2
 8002470:	d9f6      	bls.n	8002460 <HAL_RCC_OscConfig+0x2d4>
 8002472:	e6cd      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002474:	f7fe fb40 	bl	8000af8 <HAL_GetTick>
 8002478:	1bc0      	subs	r0, r0, r7
 800247a:	2802      	cmp	r0, #2
 800247c:	d9d7      	bls.n	800242e <HAL_RCC_OscConfig+0x2a2>
 800247e:	e6c7      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002480:	f7fe fb3a 	bl	8000af8 <HAL_GetTick>
 8002484:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	f57f ae94 	bpl.w	80021b6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fb33 	bl	8000af8 <HAL_GetTick>
 8002492:	1b40      	subs	r0, r0, r5
 8002494:	2802      	cmp	r0, #2
 8002496:	d9f6      	bls.n	8002486 <HAL_RCC_OscConfig+0x2fa>
 8002498:	e6ba      	b.n	8002210 <HAL_RCC_OscConfig+0x84>
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	42420060 	.word	0x42420060

080024a4 <HAL_RCC_GetSysClockFreq>:
{
 80024a4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_GetSysClockFreq+0x68>)
{
 80024a8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024aa:	ac02      	add	r4, sp, #8
 80024ac:	f103 0510 	add.w	r5, r3, #16
 80024b0:	4622      	mov	r2, r4
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	3308      	adds	r3, #8
 80024b8:	c203      	stmia	r2!, {r0, r1}
 80024ba:	42ab      	cmp	r3, r5
 80024bc:	4614      	mov	r4, r2
 80024be:	d1f7      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024c0:	2301      	movs	r3, #1
 80024c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80024c6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80024c8:	4911      	ldr	r1, [pc, #68]	; (8002510 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024ca:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80024ce:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80024d0:	f003 020c 	and.w	r2, r3, #12
 80024d4:	2a08      	cmp	r2, #8
 80024d6:	d117      	bne.n	8002508 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024d8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80024dc:	a806      	add	r0, sp, #24
 80024de:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024e6:	d50c      	bpl.n	8002502 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024ea:	480a      	ldr	r0, [pc, #40]	; (8002514 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024ec:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f2:	aa06      	add	r2, sp, #24
 80024f4:	4413      	add	r3, r2
 80024f6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fa:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80024fe:	b007      	add	sp, #28
 8002500:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <HAL_RCC_GetSysClockFreq+0x74>)
 8002504:	4350      	muls	r0, r2
 8002506:	e7fa      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800250a:	e7f8      	b.n	80024fe <HAL_RCC_GetSysClockFreq+0x5a>
 800250c:	08003690 	.word	0x08003690
 8002510:	40021000 	.word	0x40021000
 8002514:	007a1200 	.word	0x007a1200
 8002518:	003d0900 	.word	0x003d0900

0800251c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800251c:	4a54      	ldr	r2, [pc, #336]	; (8002670 <HAL_RCC_ClockConfig+0x154>)
{
 800251e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002522:	6813      	ldr	r3, [r2, #0]
{
 8002524:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	428b      	cmp	r3, r1
{
 800252c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800252e:	d32a      	bcc.n	8002586 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002530:	6829      	ldr	r1, [r5, #0]
 8002532:	078c      	lsls	r4, r1, #30
 8002534:	d434      	bmi.n	80025a0 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	07ca      	lsls	r2, r1, #31
 8002538:	d447      	bmi.n	80025ca <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800253a:	4a4d      	ldr	r2, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x154>)
 800253c:	6813      	ldr	r3, [r2, #0]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	429e      	cmp	r6, r3
 8002544:	f0c0 8082 	bcc.w	800264c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002548:	682a      	ldr	r2, [r5, #0]
 800254a:	4c4a      	ldr	r4, [pc, #296]	; (8002674 <HAL_RCC_ClockConfig+0x158>)
 800254c:	f012 0f04 	tst.w	r2, #4
 8002550:	f040 8087 	bne.w	8002662 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	0713      	lsls	r3, r2, #28
 8002556:	d506      	bpl.n	8002566 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002558:	6863      	ldr	r3, [r4, #4]
 800255a:	692a      	ldr	r2, [r5, #16]
 800255c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002560:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002564:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002566:	f7ff ff9d 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800256a:	6863      	ldr	r3, [r4, #4]
 800256c:	4a42      	ldr	r2, [pc, #264]	; (8002678 <HAL_RCC_ClockConfig+0x15c>)
 800256e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	40d8      	lsrs	r0, r3
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_ClockConfig+0x160>)
 8002578:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800257a:	2000      	movs	r0, #0
 800257c:	f7fe fa7a 	bl	8000a74 <HAL_InitTick>
  return HAL_OK;
 8002580:	2000      	movs	r0, #0
}
 8002582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002586:	6813      	ldr	r3, [r2, #0]
 8002588:	f023 0307 	bic.w	r3, r3, #7
 800258c:	430b      	orrs	r3, r1
 800258e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	4299      	cmp	r1, r3
 8002598:	d0ca      	beq.n	8002530 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800259a:	2001      	movs	r0, #1
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a0:	4b34      	ldr	r3, [pc, #208]	; (8002674 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a6:	bf1e      	ittt	ne
 80025a8:	685a      	ldrne	r2, [r3, #4]
 80025aa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80025ae:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b2:	bf42      	ittt	mi
 80025b4:	685a      	ldrmi	r2, [r3, #4]
 80025b6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80025ba:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	68a8      	ldr	r0, [r5, #8]
 80025c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80025c4:	4302      	orrs	r2, r0
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	e7b5      	b.n	8002536 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ca:	686a      	ldr	r2, [r5, #4]
 80025cc:	4c29      	ldr	r4, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x158>)
 80025ce:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	d11c      	bne.n	800260e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	d0df      	beq.n	800259a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025da:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e0:	f023 0303 	bic.w	r3, r3, #3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80025e8:	f7fe fa86 	bl	8000af8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ec:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80025ee:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d114      	bne.n	800261e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f4:	6863      	ldr	r3, [r4, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d09d      	beq.n	800253a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fe:	f7fe fa7b 	bl	8000af8 <HAL_GetTick>
 8002602:	1bc0      	subs	r0, r0, r7
 8002604:	4540      	cmp	r0, r8
 8002606:	d9f5      	bls.n	80025f4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8002608:	2003      	movs	r0, #3
 800260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800260e:	2a02      	cmp	r2, #2
 8002610:	d102      	bne.n	8002618 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002612:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002616:	e7df      	b.n	80025d8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	f013 0f02 	tst.w	r3, #2
 800261c:	e7dc      	b.n	80025d8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800261e:	2b02      	cmp	r3, #2
 8002620:	d10f      	bne.n	8002642 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002622:	6863      	ldr	r3, [r4, #4]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d086      	beq.n	800253a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800262c:	f7fe fa64 	bl	8000af8 <HAL_GetTick>
 8002630:	1bc0      	subs	r0, r0, r7
 8002632:	4540      	cmp	r0, r8
 8002634:	d9f5      	bls.n	8002622 <HAL_RCC_ClockConfig+0x106>
 8002636:	e7e7      	b.n	8002608 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002638:	f7fe fa5e 	bl	8000af8 <HAL_GetTick>
 800263c:	1bc0      	subs	r0, r0, r7
 800263e:	4540      	cmp	r0, r8
 8002640:	d8e2      	bhi.n	8002608 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002642:	6863      	ldr	r3, [r4, #4]
 8002644:	f013 0f0c 	tst.w	r3, #12
 8002648:	d1f6      	bne.n	8002638 <HAL_RCC_ClockConfig+0x11c>
 800264a:	e776      	b.n	800253a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	f023 0307 	bic.w	r3, r3, #7
 8002652:	4333      	orrs	r3, r6
 8002654:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	429e      	cmp	r6, r3
 800265e:	d19c      	bne.n	800259a <HAL_RCC_ClockConfig+0x7e>
 8002660:	e772      	b.n	8002548 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	68e9      	ldr	r1, [r5, #12]
 8002666:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800266a:	430b      	orrs	r3, r1
 800266c:	6063      	str	r3, [r4, #4]
 800266e:	e771      	b.n	8002554 <HAL_RCC_ClockConfig+0x38>
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	080036a0 	.word	0x080036a0
 800267c:	20000008 	.word	0x20000008

08002680 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	4a03      	ldr	r2, [pc, #12]	; (800269c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800268e:	6810      	ldr	r0, [r2, #0]
}    
 8002690:	40d8      	lsrs	r0, r3
 8002692:	4770      	bx	lr
 8002694:	40021000 	.word	0x40021000
 8002698:	080036b0 	.word	0x080036b0
 800269c:	20000008 	.word	0x20000008

080026a0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80026aa:	5cd3      	ldrb	r3, [r2, r3]
 80026ac:	4a03      	ldr	r2, [pc, #12]	; (80026bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026ae:	6810      	ldr	r0, [r2, #0]
} 
 80026b0:	40d8      	lsrs	r0, r3
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000
 80026b8:	080036b0 	.word	0x080036b0
 80026bc:	20000008 	.word	0x20000008

080026c0 <HAL_TIM_Base_Start>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80026c0:	2302      	movs	r3, #2

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026c2:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80026c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6013      	str	r3, [r2, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80026d0:	2301      	movs	r3, #1
 80026d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 80026d6:	2000      	movs	r0, #0
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80026de:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f04f 0302 	mov.w	r3, #2
 80026e6:	d01c      	beq.n	8002722 <HAL_TIM_ConfigClockSource+0x48>
 80026e8:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 80026ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026ee:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80026f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026f6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80026fa:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80026fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002700:	680a      	ldr	r2, [r1, #0]
 8002702:	2a40      	cmp	r2, #64	; 0x40
 8002704:	d079      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x120>
 8002706:	d819      	bhi.n	800273c <HAL_TIM_ConfigClockSource+0x62>
 8002708:	2a10      	cmp	r2, #16
 800270a:	f000 8093 	beq.w	8002834 <HAL_TIM_ConfigClockSource+0x15a>
 800270e:	d80a      	bhi.n	8002726 <HAL_TIM_ConfigClockSource+0x4c>
 8002710:	2a00      	cmp	r2, #0
 8002712:	f000 8089 	beq.w	8002828 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8002716:	2301      	movs	r3, #1
 8002718:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271c:	2300      	movs	r3, #0
 800271e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002722:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002724:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002726:	2a20      	cmp	r2, #32
 8002728:	f000 808a 	beq.w	8002840 <HAL_TIM_ConfigClockSource+0x166>
 800272c:	2a30      	cmp	r2, #48	; 0x30
 800272e:	d1f2      	bne.n	8002716 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002730:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002732:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002736:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800273a:	e036      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800273c:	2a70      	cmp	r2, #112	; 0x70
 800273e:	d036      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0xd4>
 8002740:	d81b      	bhi.n	800277a <HAL_TIM_ConfigClockSource+0xa0>
 8002742:	2a50      	cmp	r2, #80	; 0x50
 8002744:	d042      	beq.n	80027cc <HAL_TIM_ConfigClockSource+0xf2>
 8002746:	2a60      	cmp	r2, #96	; 0x60
 8002748:	d1e5      	bne.n	8002716 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800274c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002752:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002754:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002758:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800275e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002762:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002766:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800276a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800276c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800276e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002770:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002774:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002778:	e017      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800277a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800277e:	d011      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0xca>
 8002780:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002784:	d1c7      	bne.n	8002716 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002786:	688a      	ldr	r2, [r1, #8]
 8002788:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800278a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800278c:	68c9      	ldr	r1, [r1, #12]
 800278e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002790:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002794:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002798:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800279a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027a2:	e002      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e7b3      	b.n	8002716 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027ae:	688a      	ldr	r2, [r1, #8]
 80027b0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80027b2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027b4:	68c9      	ldr	r1, [r1, #12]
 80027b6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80027c0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80027c2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80027c4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027c6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80027ca:	e7ee      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027cc:	684c      	ldr	r4, [r1, #4]
 80027ce:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027d0:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d2:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d4:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027d8:	f025 0501 	bic.w	r5, r5, #1
 80027dc:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027de:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 80027e0:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027e6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80027ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80027f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80027f4:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80027f8:	e7d7      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027fa:	684c      	ldr	r4, [r1, #4]
 80027fc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027fe:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002800:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002802:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002806:	f025 0501 	bic.w	r5, r5, #1
 800280a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800280e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002810:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002814:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800281a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800281c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800281e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002822:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002826:	e7c0      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002828:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800282a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800282e:	f042 0207 	orr.w	r2, r2, #7
 8002832:	e7ba      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002834:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002836:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800283a:	f042 0217 	orr.w	r2, r2, #23
 800283e:	e7b4      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002840:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002842:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002846:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800284a:	e7ae      	b.n	80027aa <HAL_TIM_ConfigClockSource+0xd0>

0800284c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800284c:	4a1a      	ldr	r2, [pc, #104]	; (80028b8 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800284e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002850:	4290      	cmp	r0, r2
 8002852:	d00a      	beq.n	800286a <TIM_Base_SetConfig+0x1e>
 8002854:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002858:	d007      	beq.n	800286a <TIM_Base_SetConfig+0x1e>
 800285a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800285e:	4290      	cmp	r0, r2
 8002860:	d003      	beq.n	800286a <TIM_Base_SetConfig+0x1e>
 8002862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002866:	4290      	cmp	r0, r2
 8002868:	d115      	bne.n	8002896 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800286a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002870:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <TIM_Base_SetConfig+0x6c>)
 8002874:	4290      	cmp	r0, r2
 8002876:	d00a      	beq.n	800288e <TIM_Base_SetConfig+0x42>
 8002878:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800287c:	d007      	beq.n	800288e <TIM_Base_SetConfig+0x42>
 800287e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002882:	4290      	cmp	r0, r2
 8002884:	d003      	beq.n	800288e <TIM_Base_SetConfig+0x42>
 8002886:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800288a:	4290      	cmp	r0, r2
 800288c:	d103      	bne.n	8002896 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800288e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002890:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002894:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002896:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800289c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800289e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028a0:	688b      	ldr	r3, [r1, #8]
 80028a2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80028a4:	680b      	ldr	r3, [r1, #0]
 80028a6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <TIM_Base_SetConfig+0x6c>)
 80028aa:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80028ac:	bf04      	itt	eq
 80028ae:	690b      	ldreq	r3, [r1, #16]
 80028b0:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80028b2:	2301      	movs	r3, #1
 80028b4:	6143      	str	r3, [r0, #20]
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00

080028bc <HAL_TIM_Base_Init>:
{
 80028bc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80028be:	4604      	mov	r4, r0
 80028c0:	b1a0      	cbz	r0, 80028ec <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80028c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ca:	b91b      	cbnz	r3, 80028d4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028d0:	f000 fe20 	bl	8003514 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80028d4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80028d8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028dc:	1d21      	adds	r1, r4, #4
 80028de:	f7ff ffb5 	bl	800284c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80028e2:	2301      	movs	r3, #1
  return HAL_OK;
 80028e4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80028e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028ec:	2001      	movs	r0, #1
}
 80028ee:	bd10      	pop	{r4, pc}

080028f0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80028f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80028f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	f04f 0302 	mov.w	r3, #2
 80028fc:	d018      	beq.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80028fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002902:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002904:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002906:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002908:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800290a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800290e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	4322      	orrs	r2, r4
 8002914:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	430a      	orrs	r2, r1
 8002922:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002924:	2301      	movs	r3, #1
 8002926:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800292a:	2300      	movs	r3, #0
 800292c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002930:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002932:	bd10      	pop	{r4, pc}

08002934 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002938:	6805      	ldr	r5, [r0, #0]
 800293a:	68c2      	ldr	r2, [r0, #12]
 800293c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800293e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002940:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002944:	4313      	orrs	r3, r2
 8002946:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002948:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800294a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800294c:	430b      	orrs	r3, r1
 800294e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002950:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8002954:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002958:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800295a:	4313      	orrs	r3, r2
 800295c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295e:	696b      	ldr	r3, [r5, #20]
 8002960:	6982      	ldr	r2, [r0, #24]
 8002962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002966:	4313      	orrs	r3, r2
 8002968:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <UART_SetConfig+0x138>)
{
 800296c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800296e:	429d      	cmp	r5, r3
 8002970:	f04f 0419 	mov.w	r4, #25
 8002974:	d146      	bne.n	8002a04 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002976:	f7ff fe93 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 800297a:	fb04 f300 	mul.w	r3, r4, r0
 800297e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002982:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002986:	00b6      	lsls	r6, r6, #2
 8002988:	fbb3 f3f6 	udiv	r3, r3, r6
 800298c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002990:	011e      	lsls	r6, r3, #4
 8002992:	f7ff fe85 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 8002996:	4360      	muls	r0, r4
 8002998:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	fbb0 f7f3 	udiv	r7, r0, r3
 80029a2:	f7ff fe7d 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 80029a6:	4360      	muls	r0, r4
 80029a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80029b2:	fbb3 f3f8 	udiv	r3, r3, r8
 80029b6:	fb08 7313 	mls	r3, r8, r3, r7
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	3332      	adds	r3, #50	; 0x32
 80029be:	fbb3 f3f8 	udiv	r3, r3, r8
 80029c2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80029c6:	f7ff fe6b 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
 80029ca:	4360      	muls	r0, r4
 80029cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80029d0:	0092      	lsls	r2, r2, #2
 80029d2:	fbb0 faf2 	udiv	sl, r0, r2
 80029d6:	f7ff fe63 	bl	80026a0 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80029da:	4360      	muls	r0, r4
 80029dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80029ea:	fb08 a313 	mls	r3, r8, r3, sl
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	3332      	adds	r3, #50	; 0x32
 80029f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	433b      	orrs	r3, r7
 80029fc:	4433      	add	r3, r6
 80029fe:	60ab      	str	r3, [r5, #8]
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	f7ff fe3c 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002a08:	fb04 f300 	mul.w	r3, r4, r0
 8002a0c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002a10:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002a14:	00b6      	lsls	r6, r6, #2
 8002a16:	fbb3 f3f6 	udiv	r3, r3, r6
 8002a1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a1e:	011e      	lsls	r6, r3, #4
 8002a20:	f7ff fe2e 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002a24:	4360      	muls	r0, r4
 8002a26:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a30:	f7ff fe26 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002a34:	4360      	muls	r0, r4
 8002a36:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a40:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a44:	fb08 7313 	mls	r3, r8, r3, r7
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	3332      	adds	r3, #50	; 0x32
 8002a4c:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a50:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002a54:	f7ff fe14 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002a58:	4360      	muls	r0, r4
 8002a5a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	fbb0 faf2 	udiv	sl, r0, r2
 8002a64:	f7ff fe0c 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002a68:	e7b7      	b.n	80029da <UART_SetConfig+0xa6>
 8002a6a:	bf00      	nop
 8002a6c:	40013800 	.word	0x40013800

08002a70 <HAL_UART_Init>:
{
 8002a70:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002a72:	4604      	mov	r4, r0
 8002a74:	b340      	cbz	r0, 8002ac8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002a76:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a7a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a7e:	b91b      	cbnz	r3, 8002a88 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002a80:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002a84:	f000 fd76 	bl	8003574 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002a8a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a90:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a92:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a98:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a9a:	f7ff ff4b 	bl	8002934 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a9e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ab0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab8:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002aba:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abc:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002abe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002ac2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002ac6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ac8:	2001      	movs	r0, #1
}
 8002aca:	bd10      	pop	{r4, pc}

08002acc <BME280_Read8>:
  return tmp;
}
#endif
#ifdef BME280
uint8_t BME280_Read8(uint8_t addr)
{
 8002acc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t tmp = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	aa06      	add	r2, sp, #24
 8002ad2:	f802 3d01 	strb.w	r3, [r2, #-1]!

  HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8002ad6:	230a      	movs	r3, #10
 8002ad8:	9302      	str	r3, [sp, #8]
 8002ada:	2301      	movs	r3, #1
 8002adc:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <BME280_Read8+0x2c>)
 8002ae4:	21ec      	movs	r1, #236	; 0xec
 8002ae6:	6800      	ldr	r0, [r0, #0]
 8002ae8:	f7fe fd64 	bl	80015b4 <HAL_I2C_Mem_Read>

  return tmp;
}
 8002aec:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8002af0:	b007      	add	sp, #28
 8002af2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002af6:	bf00      	nop
 8002af8:	2000004c 	.word	0x2000004c

08002afc <BME280_Read16>:
	return (tmp >> 8) | (tmp << 8);
}
#endif
#ifdef BME280
uint16_t BME280_Read16(uint8_t addr)
{
 8002afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	uint8_t tmp[2];

	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 8002afe:	230a      	movs	r3, #10
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	2302      	movs	r3, #2
 8002b04:	4602      	mov	r2, r0
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	4808      	ldr	r0, [pc, #32]	; (8002b2c <BME280_Read16+0x30>)
 8002b0a:	ab05      	add	r3, sp, #20
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	21ec      	movs	r1, #236	; 0xec
 8002b10:	2301      	movs	r3, #1
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	f7fe fd4e 	bl	80015b4 <HAL_I2C_Mem_Read>

	return ((tmp[0] << 8) | tmp[1]);
 8002b18:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002b1c:	f89d 3015 	ldrb.w	r3, [sp, #21]
}
 8002b20:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002b24:	b007      	add	sp, #28
 8002b26:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b2a:	bf00      	nop
 8002b2c:	2000004c 	.word	0x2000004c

08002b30 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8002b30:	b508      	push	{r3, lr}
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 8002b32:	f7ff ffe3 	bl	8002afc <BME280_Read16>
	return (tmp >> 8) | (tmp << 8);
 8002b36:	ba40      	rev16	r0, r0
}
 8002b38:	b280      	uxth	r0, r0
 8002b3a:	bd08      	pop	{r3, pc}

08002b3c <BME280_Write8>:
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
}
#endif
#ifdef BME280
void BME280_Write8(uint8_t address, uint8_t data)
{
 8002b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8002b3e:	230a      	movs	r3, #10
{
 8002b40:	aa06      	add	r2, sp, #24
 8002b42:	f802 1d01 	strb.w	r1, [r2, #-1]!
	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8002b46:	9302      	str	r3, [sp, #8]
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4803      	ldr	r0, [pc, #12]	; (8002b60 <BME280_Write8+0x24>)
 8002b52:	21ec      	movs	r1, #236	; 0xec
 8002b54:	6800      	ldr	r0, [r0, #0]
 8002b56:	f7fe fc97 	bl	8001488 <HAL_I2C_Mem_Write>
}
 8002b5a:	b007      	add	sp, #28
 8002b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b60:	2000004c 	.word	0x2000004c

08002b64 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8002b64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp[3];

	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 8002b66:	230a      	movs	r3, #10
 8002b68:	9302      	str	r3, [sp, #8]
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	480a      	ldr	r0, [pc, #40]	; (8002b9c <BME280_Read24+0x38>)
 8002b72:	ab05      	add	r3, sp, #20
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	21ec      	movs	r1, #236	; 0xec
 8002b78:	2301      	movs	r3, #1
 8002b7a:	6800      	ldr	r0, [r0, #0]
 8002b7c:	f7fe fd1a 	bl	80015b4 <HAL_I2C_Mem_Read>

	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8002b80:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002b84:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002b8e:	f89d 0016 	ldrb.w	r0, [sp, #22]
}
 8002b92:	4318      	orrs	r0, r3
 8002b94:	b007      	add	sp, #28
 8002b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b9a:	bf00      	nop
 8002b9c:	2000004c 	.word	0x2000004c

08002ba0 <BME280_IsReadingCalibration>:
	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
}
#endif
#ifdef BME280
uint8_t BME280_IsReadingCalibration(void)
{
 8002ba0:	b508      	push	{r3, lr}
	uint8_t Status = BME280_Read8(BME280_STATUS);
 8002ba2:	20f3      	movs	r0, #243	; 0xf3
 8002ba4:	f7ff ff92 	bl	8002acc <BME280_Read8>

	return ((Status & 1) != 0);
}
 8002ba8:	f000 0001 	and.w	r0, r0, #1
 8002bac:	bd08      	pop	{r3, pc}

08002bae <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8002bae:	0089      	lsls	r1, r1, #2
 8002bb0:	f001 011c 	and.w	r1, r1, #28
 8002bb4:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
 8002bb8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8002bbc:	20f5      	movs	r0, #245	; 0xf5
 8002bbe:	f7ff bfbd 	b.w	8002b3c <BME280_Write8>
	...

08002bc4 <BME280_Init>:
}

void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bc8:	f89d 4020 	ldrb.w	r4, [sp, #32]
	i2c_h = i2c_handler;
 8002bcc:	4d63      	ldr	r5, [pc, #396]	; (8002d5c <BME280_Init+0x198>)
 8002bce:	2c03      	cmp	r4, #3
 8002bd0:	bf28      	it	cs
 8002bd2:	2403      	movcs	r4, #3
 8002bd4:	6028      	str	r0, [r5, #0]
	uint8_t HumReg, i;

	if (mode > BME280_NORMALMODE)
	    mode = BME280_NORMALMODE;
	_mode = mode;
 8002bd6:	4862      	ldr	r0, [pc, #392]	; (8002d60 <BME280_Init+0x19c>)
	if(mode == BME280_FORCEDMODE)
		mode = BME280_SLEEPMODE;
 8002bd8:	2c01      	cmp	r4, #1
	_mode = mode;
 8002bda:	7004      	strb	r4, [r0, #0]
		mode = BME280_SLEEPMODE;
 8002bdc:	bf08      	it	eq
 8002bde:	2400      	moveq	r4, #0
 8002be0:	2905      	cmp	r1, #5
 8002be2:	bf28      	it	cs
 8002be4:	2105      	movcs	r1, #5
 8002be6:	2a05      	cmp	r2, #5
 8002be8:	bf28      	it	cs
 8002bea:	2205      	movcs	r2, #5
 8002bec:	4615      	mov	r5, r2
		temperature_resolution = BME280_TEMPERATURE_20BIT;
	_temperature_res = temperature_resolution;

	if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
		pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
	_pressure_oversampling = pressure_oversampling;
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <BME280_Init+0x1a0>)

	if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
		huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
	_huminidity_oversampling = huminidity_oversampling;
 8002bf0:	2b05      	cmp	r3, #5
	_pressure_oversampling = pressure_oversampling;
 8002bf2:	7015      	strb	r5, [r2, #0]
	_huminidity_oversampling = huminidity_oversampling;
 8002bf4:	4a5c      	ldr	r2, [pc, #368]	; (8002d68 <BME280_Init+0x1a4>)
 8002bf6:	460f      	mov	r7, r1
 8002bf8:	bf28      	it	cs
 8002bfa:	2305      	movcs	r3, #5
 8002bfc:	4690      	mov	r8, r2
	_temperature_res = temperature_resolution;
 8002bfe:	495b      	ldr	r1, [pc, #364]	; (8002d6c <BME280_Init+0x1a8>)
	_huminidity_oversampling = huminidity_oversampling;
 8002c00:	7013      	strb	r3, [r2, #0]
	_temperature_res = temperature_resolution;
 8002c02:	700f      	strb	r7, [r1, #0]

	while(BME280_Read8(BME280_CHIPID) != 0x60);
 8002c04:	20d0      	movs	r0, #208	; 0xd0
 8002c06:	f7ff ff61 	bl	8002acc <BME280_Read8>
 8002c0a:	2860      	cmp	r0, #96	; 0x60
 8002c0c:	d1fa      	bne.n	8002c04 <BME280_Init+0x40>

	BME280_Write8(BME280_SOFTRESET, 0xB6);
 8002c0e:	21b6      	movs	r1, #182	; 0xb6
 8002c10:	20e0      	movs	r0, #224	; 0xe0
 8002c12:	f7ff ff93 	bl	8002b3c <BME280_Write8>
 8002c16:	261e      	movs	r6, #30

	for(i = 0; i<30; i++)
		Delay_us(1000); // Wait  300 msfor wake up
 8002c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c1c:	3e01      	subs	r6, #1
 8002c1e:	f000 fa57 	bl	80030d0 <Delay_us>
	for(i = 0; i<30; i++)
 8002c22:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8002c26:	d1f7      	bne.n	8002c18 <BME280_Init+0x54>

	while(BME280_IsReadingCalibration())
 8002c28:	f7ff ffba 	bl	8002ba0 <BME280_IsReadingCalibration>
 8002c2c:	4606      	mov	r6, r0
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	f040 8088 	bne.w	8002d44 <BME280_Init+0x180>
		for(i = 0; i<10; i++)
			Delay_us(1000);

	/* read calibration data */
	t1 = BME280_Read16LE(BME280_DIG_T1);
 8002c34:	2088      	movs	r0, #136	; 0x88
 8002c36:	f7ff ff7b 	bl	8002b30 <BME280_Read16LE>
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <BME280_Init+0x1ac>)
 8002c3c:	8018      	strh	r0, [r3, #0]
	t2 = BME280_Read16LE(BME280_DIG_T2);
 8002c3e:	208a      	movs	r0, #138	; 0x8a
 8002c40:	f7ff ff76 	bl	8002b30 <BME280_Read16LE>
 8002c44:	4b4b      	ldr	r3, [pc, #300]	; (8002d74 <BME280_Init+0x1b0>)
 8002c46:	8018      	strh	r0, [r3, #0]
	t3 = BME280_Read16LE(BME280_DIG_T3);
 8002c48:	208c      	movs	r0, #140	; 0x8c
 8002c4a:	f7ff ff71 	bl	8002b30 <BME280_Read16LE>
 8002c4e:	4b4a      	ldr	r3, [pc, #296]	; (8002d78 <BME280_Init+0x1b4>)
 8002c50:	8018      	strh	r0, [r3, #0]

	p1 = BME280_Read16LE(BME280_DIG_P1);
 8002c52:	208e      	movs	r0, #142	; 0x8e
 8002c54:	f7ff ff6c 	bl	8002b30 <BME280_Read16LE>
 8002c58:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <BME280_Init+0x1b8>)
 8002c5a:	8018      	strh	r0, [r3, #0]
	p2 = BME280_Read16LE(BME280_DIG_P2);
 8002c5c:	2090      	movs	r0, #144	; 0x90
 8002c5e:	f7ff ff67 	bl	8002b30 <BME280_Read16LE>
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <BME280_Init+0x1bc>)
 8002c64:	8018      	strh	r0, [r3, #0]
	p3 = BME280_Read16LE(BME280_DIG_P3);
 8002c66:	2092      	movs	r0, #146	; 0x92
 8002c68:	f7ff ff62 	bl	8002b30 <BME280_Read16LE>
 8002c6c:	4b45      	ldr	r3, [pc, #276]	; (8002d84 <BME280_Init+0x1c0>)
 8002c6e:	8018      	strh	r0, [r3, #0]
	p4 = BME280_Read16LE(BME280_DIG_P4);
 8002c70:	2094      	movs	r0, #148	; 0x94
 8002c72:	f7ff ff5d 	bl	8002b30 <BME280_Read16LE>
 8002c76:	4b44      	ldr	r3, [pc, #272]	; (8002d88 <BME280_Init+0x1c4>)
 8002c78:	8018      	strh	r0, [r3, #0]
	p5 = BME280_Read16LE(BME280_DIG_P5);
 8002c7a:	2096      	movs	r0, #150	; 0x96
 8002c7c:	f7ff ff58 	bl	8002b30 <BME280_Read16LE>
 8002c80:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <BME280_Init+0x1c8>)
 8002c82:	8018      	strh	r0, [r3, #0]
	p6 = BME280_Read16LE(BME280_DIG_P6);
 8002c84:	2098      	movs	r0, #152	; 0x98
 8002c86:	f7ff ff53 	bl	8002b30 <BME280_Read16LE>
 8002c8a:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <BME280_Init+0x1cc>)
 8002c8c:	8018      	strh	r0, [r3, #0]
	p7 = BME280_Read16LE(BME280_DIG_P7);
 8002c8e:	209a      	movs	r0, #154	; 0x9a
 8002c90:	f7ff ff4e 	bl	8002b30 <BME280_Read16LE>
 8002c94:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <BME280_Init+0x1d0>)
 8002c96:	8018      	strh	r0, [r3, #0]
	p8 = BME280_Read16LE(BME280_DIG_P8);
 8002c98:	209c      	movs	r0, #156	; 0x9c
 8002c9a:	f7ff ff49 	bl	8002b30 <BME280_Read16LE>
 8002c9e:	4b3e      	ldr	r3, [pc, #248]	; (8002d98 <BME280_Init+0x1d4>)
 8002ca0:	8018      	strh	r0, [r3, #0]
	p9 = BME280_Read16LE(BME280_DIG_P9);
 8002ca2:	209e      	movs	r0, #158	; 0x9e
 8002ca4:	f7ff ff44 	bl	8002b30 <BME280_Read16LE>
 8002ca8:	4b3c      	ldr	r3, [pc, #240]	; (8002d9c <BME280_Init+0x1d8>)
 8002caa:	8018      	strh	r0, [r3, #0]

	h1 = BME280_Read8(BME280_DIG_H1);
 8002cac:	20a1      	movs	r0, #161	; 0xa1
 8002cae:	f7ff ff0d 	bl	8002acc <BME280_Read8>
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <BME280_Init+0x1dc>)
 8002cb4:	7018      	strb	r0, [r3, #0]
	h2 = BME280_Read16LE(BME280_DIG_H2);
 8002cb6:	20e1      	movs	r0, #225	; 0xe1
 8002cb8:	f7ff ff3a 	bl	8002b30 <BME280_Read16LE>
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <BME280_Init+0x1e0>)
 8002cbe:	8018      	strh	r0, [r3, #0]
	h3 = BME280_Read8(BME280_DIG_H3);
 8002cc0:	20e3      	movs	r0, #227	; 0xe3
 8002cc2:	f7ff ff03 	bl	8002acc <BME280_Read8>
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <BME280_Init+0x1e4>)
 8002cc8:	7018      	strb	r0, [r3, #0]
	h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8002cca:	20e4      	movs	r0, #228	; 0xe4
 8002ccc:	f7ff fefe 	bl	8002acc <BME280_Read8>
 8002cd0:	4681      	mov	r9, r0
 8002cd2:	20e5      	movs	r0, #229	; 0xe5
 8002cd4:	f7ff fefa 	bl	8002acc <BME280_Read8>
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <BME280_Init+0x1e8>)
 8002cda:	f000 000f 	and.w	r0, r0, #15
 8002cde:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 8002ce2:	8018      	strh	r0, [r3, #0]
	h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8002ce4:	20e6      	movs	r0, #230	; 0xe6
 8002ce6:	f7ff fef1 	bl	8002acc <BME280_Read8>
 8002cea:	4681      	mov	r9, r0
 8002cec:	20e5      	movs	r0, #229	; 0xe5
 8002cee:	f7ff feed 	bl	8002acc <BME280_Read8>
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <BME280_Init+0x1ec>)
 8002cf4:	f3c0 1007 	ubfx	r0, r0, #4, #8
 8002cf8:	ea40 1009 	orr.w	r0, r0, r9, lsl #4
 8002cfc:	8018      	strh	r0, [r3, #0]
	h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8002cfe:	20e7      	movs	r0, #231	; 0xe7
 8002d00:	f7ff fee4 	bl	8002acc <BME280_Read8>
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <BME280_Init+0x1f0>)
 8002d06:	7018      	strb	r0, [r3, #0]

	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8002d08:	20f2      	movs	r0, #242	; 0xf2
 8002d0a:	f7ff fedf 	bl	8002acc <BME280_Read8>
	HumReg &= 0xF8;
	HumReg |= _huminidity_oversampling;
 8002d0e:	f898 3000 	ldrb.w	r3, [r8]
	HumReg &= 0xF8;
 8002d12:	f000 01f8 	and.w	r1, r0, #248	; 0xf8
	BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8002d16:	4319      	orrs	r1, r3
 8002d18:	20f2      	movs	r0, #242	; 0xf2
 8002d1a:	f7ff ff0f 	bl	8002b3c <BME280_Write8>
	HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8002d1e:	20f2      	movs	r0, #242	; 0xf2
 8002d20:	f7ff fed4 	bl	8002acc <BME280_Read8>
	BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8002d24:	00a9      	lsls	r1, r5, #2
 8002d26:	ea41 1147 	orr.w	r1, r1, r7, lsl #5
 8002d2a:	4321      	orrs	r1, r4
 8002d2c:	b2c9      	uxtb	r1, r1
 8002d2e:	20f4      	movs	r0, #244	; 0xf4
 8002d30:	f7ff ff04 	bl	8002b3c <BME280_Write8>

	if(mode == BME280_NORMALMODE)
 8002d34:	2c03      	cmp	r4, #3
 8002d36:	d10f      	bne.n	8002d58 <BME280_Init+0x194>
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8002d38:	4631      	mov	r1, r6
	{
		BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
	}
}
 8002d3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8002d3e:	20f5      	movs	r0, #245	; 0xf5
 8002d40:	f7ff befc 	b.w	8002b3c <BME280_Write8>
 8002d44:	260a      	movs	r6, #10
			Delay_us(1000);
 8002d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d4a:	3e01      	subs	r6, #1
 8002d4c:	f000 f9c0 	bl	80030d0 <Delay_us>
		for(i = 0; i<10; i++)
 8002d50:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8002d54:	d1f7      	bne.n	8002d46 <BME280_Init+0x182>
 8002d56:	e767      	b.n	8002c28 <BME280_Init+0x64>
 8002d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d5c:	2000004c 	.word	0x2000004c
 8002d60:	20000054 	.word	0x20000054
 8002d64:	20000036 	.word	0x20000036
 8002d68:	2000002e 	.word	0x2000002e
 8002d6c:	20000048 	.word	0x20000048
 8002d70:	20000046 	.word	0x20000046
 8002d74:	20000038 	.word	0x20000038
 8002d78:	2000002c 	.word	0x2000002c
 8002d7c:	2000003e 	.word	0x2000003e
 8002d80:	20000030 	.word	0x20000030
 8002d84:	20000056 	.word	0x20000056
 8002d88:	2000005c 	.word	0x2000005c
 8002d8c:	2000003a 	.word	0x2000003a
 8002d90:	20000044 	.word	0x20000044
 8002d94:	20000034 	.word	0x20000034
 8002d98:	20000042 	.word	0x20000042
 8002d9c:	2000005a 	.word	0x2000005a
 8002da0:	20000032 	.word	0x20000032
 8002da4:	20000040 	.word	0x20000040
 8002da8:	20000058 	.word	0x20000058
 8002dac:	20000052 	.word	0x20000052
 8002db0:	2000003c 	.word	0x2000003c
 8002db4:	20000050 	.word	0x20000050

08002db8 <BME280_ReadTemperature>:
  return -99;
}
#endif
#ifdef BME280
float BME280_ReadTemperature(void)
{
 8002db8:	b508      	push	{r3, lr}
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <BME280_ReadTemperature+0x88>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d007      	beq.n	8002dd2 <BME280_ReadTemperature+0x1a>
				  break;
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8002dc2:	20fa      	movs	r0, #250	; 0xfa
 8002dc4:	f7ff fece 	bl	8002b64 <BME280_Read24>
  if (adc_T == 0x800000)
 8002dc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002dcc:	d118      	bne.n	8002e00 <BME280_ReadTemperature+0x48>
	  return -99;
 8002dce:	481d      	ldr	r0, [pc, #116]	; (8002e44 <BME280_ReadTemperature+0x8c>)

  float T  = (t_fine * 5 + 128) >> 8;
  return T/100;

  return -99;
}
 8002dd0:	bd08      	pop	{r3, pc}
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8002dd2:	20f4      	movs	r0, #244	; 0xf4
 8002dd4:	f7ff fe7a 	bl	8002acc <BME280_Read8>
	  ctrl &= ~(0x03);
 8002dd8:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
	  BME280_Write8(BME280_CONTROL, ctrl);
 8002ddc:	f041 0101 	orr.w	r1, r1, #1
 8002de0:	20f4      	movs	r0, #244	; 0xf4
 8002de2:	f7ff feab 	bl	8002b3c <BME280_Write8>
	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 8002de6:	20f4      	movs	r0, #244	; 0xf4
 8002de8:	f7ff fe70 	bl	8002acc <BME280_Read8>
	  if(mode == BME280_FORCEDMODE)
 8002dec:	f000 0003 	and.w	r0, r0, #3
 8002df0:	2801      	cmp	r0, #1
 8002df2:	d1e6      	bne.n	8002dc2 <BME280_ReadTemperature+0xa>
			  mode = BME280_Read8(BME280_CONTROL);
 8002df4:	20f4      	movs	r0, #244	; 0xf4
 8002df6:	f7ff fe69 	bl	8002acc <BME280_Read8>
			  if(mode == BME280_SLEEPMODE)
 8002dfa:	0783      	lsls	r3, r0, #30
 8002dfc:	d1fa      	bne.n	8002df4 <BME280_ReadTemperature+0x3c>
 8002dfe:	e7e0      	b.n	8002dc2 <BME280_ReadTemperature+0xa>
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8002e00:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <BME280_ReadTemperature+0x90>)
		  ((int32_t)t3)) >> 14;
 8002e02:	4912      	ldr	r1, [pc, #72]	; (8002e4c <BME280_ReadTemperature+0x94>)
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8002e04:	881a      	ldrh	r2, [r3, #0]
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8002e06:	ebc2 2320 	rsb	r3, r2, r0, asr #8
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8002e0a:	0052      	lsls	r2, r2, #1
 8002e0c:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
		  ((int32_t)t2)) >> 11;
 8002e10:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <BME280_ReadTemperature+0x98>)
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8002e12:	435b      	muls	r3, r3
		  ((int32_t)t2)) >> 11;
 8002e14:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8002e18:	131b      	asrs	r3, r3, #12
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8002e1a:	4342      	muls	r2, r0
		  ((int32_t)t3)) >> 14;
 8002e1c:	f9b1 0000 	ldrsh.w	r0, [r1]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8002e20:	4358      	muls	r0, r3
  t_fine = var1 + var2;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <BME280_ReadTemperature+0x9c>)
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8002e24:	1380      	asrs	r0, r0, #14
  t_fine = var1 + var2;
 8002e26:	eb00 20e2 	add.w	r0, r0, r2, asr #11
 8002e2a:	6018      	str	r0, [r3, #0]
  float T  = (t_fine * 5 + 128) >> 8;
 8002e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002e30:	3080      	adds	r0, #128	; 0x80
 8002e32:	1200      	asrs	r0, r0, #8
 8002e34:	f7fd fa44 	bl	80002c0 <__aeabi_i2f>
  return T/100;
 8002e38:	4907      	ldr	r1, [pc, #28]	; (8002e58 <BME280_ReadTemperature+0xa0>)
 8002e3a:	f7fd fb49 	bl	80004d0 <__aeabi_fdiv>
 8002e3e:	bd08      	pop	{r3, pc}
 8002e40:	20000054 	.word	0x20000054
 8002e44:	c2c60000 	.word	0xc2c60000
 8002e48:	20000046 	.word	0x20000046
 8002e4c:	2000002c 	.word	0x2000002c
 8002e50:	20000038 	.word	0x20000038
 8002e54:	20000060 	.word	0x20000060
 8002e58:	42c80000 	.word	0x42c80000

08002e5c <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  return altitude;
}
#endif
#ifdef BME280
uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8002e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	4604      	mov	r4, r0
 8002e62:	e88d 0006 	stmia.w	sp, {r1, r2}
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8002e66:	f7ff ffa7 	bl	8002db8 <BME280_ReadTemperature>

	if(*temperature == -99)
 8002e6a:	4988      	ldr	r1, [pc, #544]	; (800308c <BME280_ReadTemperatureAndPressureAndHuminidity+0x230>)
	*temperature = BME280_ReadTemperature();
 8002e6c:	6020      	str	r0, [r4, #0]
	if(*temperature == -99)
 8002e6e:	f7fd fc0f 	bl	8000690 <__aeabi_fcmpeq>
 8002e72:	4682      	mov	sl, r0
 8002e74:	b118      	cbz	r0, 8002e7e <BME280_ReadTemperatureAndPressureAndHuminidity+0x22>
	  return -1;
 8002e76:	20ff      	movs	r0, #255	; 0xff
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
	float h = (v_x1_u32r>>12);
	*huminidity = h / 1024.0;

	return 0;
}
 8002e78:	b003      	add	sp, #12
 8002e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8002e7e:	20f7      	movs	r0, #247	; 0xf7
 8002e80:	f7ff fe70 	bl	8002b64 <BME280_Read24>
	var1 = ((int64_t)t_fine) - 128000;
 8002e84:	f8df b244 	ldr.w	fp, [pc, #580]	; 80030cc <BME280_ReadTemperatureAndPressureAndHuminidity+0x270>
	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8002e88:	4686      	mov	lr, r0
	var1 = ((int64_t)t_fine) - 128000;
 8002e8a:	f8db 0000 	ldr.w	r0, [fp]
 8002e8e:	17c1      	asrs	r1, r0, #31
 8002e90:	f5b0 30fa 	subs.w	r0, r0, #128000	; 0x1f400
 8002e94:	f141 31ff 	adc.w	r1, r1, #4294967295
	var2 = var1 * var1 * (int64_t)p6;
 8002e98:	fba0 8900 	umull	r8, r9, r0, r0
 8002e9c:	fb00 f301 	mul.w	r3, r0, r1
 8002ea0:	eb09 0943 	add.w	r9, r9, r3, lsl #1
			((var1 * (int64_t)p2)<<12);
 8002ea4:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <BME280_ReadTemperatureAndPressureAndHuminidity+0x234>)
 8002ea6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002eaa:	fb02 f401 	mul.w	r4, r2, r1
 8002eae:	17d3      	asrs	r3, r2, #31
 8002eb0:	fb00 4403 	mla	r4, r0, r3, r4
 8002eb4:	fba2 2300 	umull	r2, r3, r2, r0
 8002eb8:	4423      	add	r3, r4
 8002eba:	031f      	lsls	r7, r3, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002ebc:	4b75      	ldr	r3, [pc, #468]	; (8003094 <BME280_ReadTemperatureAndPressureAndHuminidity+0x238>)
			((var1 * (int64_t)p2)<<12);
 8002ebe:	0316      	lsls	r6, r2, #12
 8002ec0:	ea47 5712 	orr.w	r7, r7, r2, lsr #20
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002ec4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ec8:	fb02 f409 	mul.w	r4, r2, r9
 8002ecc:	17d3      	asrs	r3, r2, #31
 8002ece:	fb08 4303 	mla	r3, r8, r3, r4
 8002ed2:	fba2 4508 	umull	r4, r5, r2, r8
 8002ed6:	441d      	add	r5, r3
 8002ed8:	0a22      	lsrs	r2, r4, #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8002eda:	4c6f      	ldr	r4, [pc, #444]	; (8003098 <BME280_ReadTemperatureAndPressureAndHuminidity+0x23c>)
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002edc:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8002ee0:	1992      	adds	r2, r2, r6
 8002ee2:	ea4f 2325 	mov.w	r3, r5, asr #8
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8002ee6:	8826      	ldrh	r6, [r4, #0]
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002ee8:	417b      	adcs	r3, r7
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8002eea:	3200      	adds	r2, #0
 8002eec:	fba2 4506 	umull	r4, r5, r2, r6
 8002ef0:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8002ef4:	fb06 5503 	mla	r5, r6, r3, r5
 8002ef8:	106a      	asrs	r2, r5, #1
 8002efa:	17eb      	asrs	r3, r5, #31
	if (var1 == 0) {
 8002efc:	ea52 0403 	orrs.w	r4, r2, r3
 8002f00:	f000 80c2 	beq.w	8003088 <BME280_ReadTemperatureAndPressureAndHuminidity+0x22c>
	var2 = var1 * var1 * (int64_t)p6;
 8002f04:	4c65      	ldr	r4, [pc, #404]	; (800309c <BME280_ReadTemperatureAndPressureAndHuminidity+0x240>)
	adc_P >>= 4;
 8002f06:	ea4f 1e2e 	mov.w	lr, lr, asr #4
	var2 = var1 * var1 * (int64_t)p6;
 8002f0a:	f9b4 6000 	ldrsh.w	r6, [r4]
	p = 1048576 - adc_P;
 8002f0e:	f5ce 1e80 	rsb	lr, lr, #1048576	; 0x100000
	var2 = var1 * var1 * (int64_t)p6;
 8002f12:	fb06 f409 	mul.w	r4, r6, r9
 8002f16:	17f7      	asrs	r7, r6, #31
 8002f18:	fb08 4707 	mla	r7, r8, r7, r4
 8002f1c:	fba6 4508 	umull	r4, r5, r6, r8
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002f20:	4e5f      	ldr	r6, [pc, #380]	; (80030a0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x244>)
	var2 = var1 * var1 * (int64_t)p6;
 8002f22:	443d      	add	r5, r7
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002f24:	f9b6 8000 	ldrsh.w	r8, [r6]
 8002f28:	fb08 f101 	mul.w	r1, r8, r1
 8002f2c:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8002f30:	fb00 1109 	mla	r1, r0, r9, r1
 8002f34:	fba8 8900 	umull	r8, r9, r8, r0
 8002f38:	4489      	add	r9, r1
	var2 = var2 + (((int64_t)p4)<<35);
 8002f3a:	495a      	ldr	r1, [pc, #360]	; (80030a4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x248>)
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002f3c:	ea4f 4749 	mov.w	r7, r9, lsl #17
 8002f40:	ea47 37d8 	orr.w	r7, r7, r8, lsr #15
 8002f44:	ea4f 4648 	mov.w	r6, r8, lsl #17
	var2 = var2 + (((int64_t)p4)<<35);
 8002f48:	f9b1 8000 	ldrsh.w	r8, [r1]
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002f4c:	1936      	adds	r6, r6, r4
 8002f4e:	416f      	adcs	r7, r5
	p = (((p<<31) - var2)*3125) / var1;
 8002f50:	ea4f 74ce 	mov.w	r4, lr, lsl #31
	var2 = var2 + (((int64_t)p4)<<35);
 8002f54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f58:	eb16 060a 	adds.w	r6, r6, sl
 8002f5c:	414f      	adcs	r7, r1
	p = (((p<<31) - var2)*3125) / var1;
 8002f5e:	1ba6      	subs	r6, r4, r6
 8002f60:	f640 4435 	movw	r4, #3125	; 0xc35
	p = 1048576 - adc_P;
 8002f64:	ea4f 79ee 	mov.w	r9, lr, asr #31
	p = (((p<<31) - var2)*3125) / var1;
 8002f68:	fba6 0104 	umull	r0, r1, r6, r4
 8002f6c:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 8002f70:	ea45 055e 	orr.w	r5, r5, lr, lsr #1
 8002f74:	eb65 0707 	sbc.w	r7, r5, r7
 8002f78:	fb04 1107 	mla	r1, r4, r7, r1
 8002f7c:	f7fd fbba 	bl	80006f4 <__aeabi_ldivmod>
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8002f80:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x24c>)
 8002f82:	134c      	asrs	r4, r1, #13
 8002f84:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f88:	0b45      	lsrs	r5, r0, #13
 8002f8a:	fb02 f604 	mul.w	r6, r2, r4
 8002f8e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
 8002f92:	17d3      	asrs	r3, r2, #31
 8002f94:	fb05 6603 	mla	r6, r5, r3, r6
 8002f98:	fba2 2305 	umull	r2, r3, r2, r5
 8002f9c:	4354      	muls	r4, r2
 8002f9e:	4433      	add	r3, r6
 8002fa0:	fb05 4403 	mla	r4, r5, r3, r4
 8002fa4:	fba2 2305 	umull	r2, r3, r2, r5
 8002fa8:	4423      	add	r3, r4
 8002faa:	0e54      	lsrs	r4, r2, #25
 8002fac:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002fb0:	1822      	adds	r2, r4, r0
	var2 = (((int64_t)p8) * p) >> 19;
 8002fb2:	4c3e      	ldr	r4, [pc, #248]	; (80030ac <BME280_ReadTemperatureAndPressureAndHuminidity+0x250>)
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8002fb4:	ea4f 6563 	mov.w	r5, r3, asr #25
	var2 = (((int64_t)p8) * p) >> 19;
 8002fb8:	f9b4 4000 	ldrsh.w	r4, [r4]
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002fbc:	eb45 0301 	adc.w	r3, r5, r1
	var2 = (((int64_t)p8) * p) >> 19;
 8002fc0:	4361      	muls	r1, r4
 8002fc2:	17e5      	asrs	r5, r4, #31
 8002fc4:	fb00 1505 	mla	r5, r0, r5, r1
 8002fc8:	fba4 0100 	umull	r0, r1, r4, r0
 8002fcc:	4429      	add	r1, r5
 8002fce:	0cc4      	lsrs	r4, r0, #19
 8002fd0:	ea44 3441 	orr.w	r4, r4, r1, lsl #13
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002fd4:	1912      	adds	r2, r2, r4
	var2 = (((int64_t)p8) * p) >> 19;
 8002fd6:	ea4f 45e1 	mov.w	r5, r1, asr #19
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002fda:	416b      	adcs	r3, r5
 8002fdc:	0a10      	lsrs	r0, r2, #8
 8002fde:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x254>)
 8002fe4:	f9b3 4000 	ldrsh.w	r4, [r3]
	*pressure = (int32_t)p/256;
 8002fe8:	9b00      	ldr	r3, [sp, #0]
	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002fea:	0122      	lsls	r2, r4, #4
 8002fec:	1812      	adds	r2, r2, r0
	*pressure = (int32_t)p/256;
 8002fee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ff2:	fb92 f2f0 	sdiv	r2, r2, r0
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 8002ff6:	20fd      	movs	r0, #253	; 0xfd
	*pressure = (int32_t)p/256;
 8002ff8:	601a      	str	r2, [r3, #0]
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 8002ffa:	f7ff fd7f 	bl	8002afc <BME280_Read16>
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 8002ffe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003002:	f43f af38 	beq.w	8002e76 <BME280_ReadTemperatureAndPressureAndHuminidity+0x1a>
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8003006:	4a2b      	ldr	r2, [pc, #172]	; (80030b4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x258>)
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8003008:	492b      	ldr	r1, [pc, #172]	; (80030b8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x25c>)
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800300a:	f9b2 2000 	ldrsh.w	r2, [r2]
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800300e:	f8db 3000 	ldr.w	r3, [fp]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8003012:	0512      	lsls	r2, r2, #20
 8003014:	ebc2 3280 	rsb	r2, r2, r0, lsl #14
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8003018:	f9b1 0000 	ldrsh.w	r0, [r1]
	v_x1_u32r = (t_fine - ((int32_t)76800));
 800301c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8003020:	fb03 2010 	mls	r0, r3, r0, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8003024:	4925      	ldr	r1, [pc, #148]	; (80030bc <BME280_ReadTemperatureAndPressureAndHuminidity+0x260>)
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 8003026:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800302a:	13c2      	asrs	r2, r0, #15
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 800302c:	7808      	ldrb	r0, [r1, #0]
 800302e:	4358      	muls	r0, r3
 8003030:	12c0      	asrs	r0, r0, #11
 8003032:	f500 4100 	add.w	r1, r0, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8003036:	4822      	ldr	r0, [pc, #136]	; (80030c0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x264>)
 8003038:	f990 0000 	ldrsb.w	r0, [r0]
 800303c:	4358      	muls	r0, r3
 800303e:	1280      	asrs	r0, r0, #10
 8003040:	4348      	muls	r0, r1
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 8003042:	4920      	ldr	r1, [pc, #128]	; (80030c4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x268>)
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8003044:	1280      	asrs	r0, r0, #10
 8003046:	f500 1300 	add.w	r3, r0, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 800304a:	f9b1 0000 	ldrsh.w	r0, [r1]
 800304e:	4358      	muls	r0, r3
 8003050:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8003054:	1380      	asrs	r0, r0, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8003056:	4350      	muls	r0, r2
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8003058:	13c3      	asrs	r3, r0, #15
 800305a:	435b      	muls	r3, r3
							 ((int32_t)h1)) >> 4));
 800305c:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x26c>)
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800305e:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 8003060:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8003062:	4353      	muls	r3, r2
 8003064:	eba0 1023 	sub.w	r0, r0, r3, asr #4
	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8003068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 800306c:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 8003070:	bfa8      	it	ge
 8003072:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
	float h = (v_x1_u32r>>12);
 8003076:	1300      	asrs	r0, r0, #12
 8003078:	f7fd f922 	bl	80002c0 <__aeabi_i2f>
	*huminidity = h / 1024.0;
 800307c:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 8003080:	f7fd f972 	bl	8000368 <__aeabi_fmul>
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	6018      	str	r0, [r3, #0]
		return 0;  // avoid exception caused by division by zero
 8003088:	4650      	mov	r0, sl
 800308a:	e6f5      	b.n	8002e78 <BME280_ReadTemperatureAndPressureAndHuminidity+0x1c>
 800308c:	c2c60000 	.word	0xc2c60000
 8003090:	20000030 	.word	0x20000030
 8003094:	20000056 	.word	0x20000056
 8003098:	2000003e 	.word	0x2000003e
 800309c:	20000044 	.word	0x20000044
 80030a0:	2000003a 	.word	0x2000003a
 80030a4:	2000005c 	.word	0x2000005c
 80030a8:	2000005a 	.word	0x2000005a
 80030ac:	20000042 	.word	0x20000042
 80030b0:	20000034 	.word	0x20000034
 80030b4:	20000052 	.word	0x20000052
 80030b8:	2000003c 	.word	0x2000003c
 80030bc:	20000058 	.word	0x20000058
 80030c0:	20000050 	.word	0x20000050
 80030c4:	20000040 	.word	0x20000040
 80030c8:	20000032 	.word	0x20000032
 80030cc:	20000060 	.word	0x20000060

080030d0 <Delay_us>:

#include "delays.h"

void Delay_us(uint16_t us)
{
	htim3.Instance->CNT = 0;
 80030d0:	2200      	movs	r2, #0
 80030d2:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <Delay_us+0x10>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim3.Instance->CNT <= us);
 80030d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030da:	4282      	cmp	r2, r0
 80030dc:	d9fc      	bls.n	80030d8 <Delay_us+0x8>
}
 80030de:	4770      	bx	lr
 80030e0:	20000254 	.word	0x20000254

080030e4 <MX_DMA_Init>:
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <MX_DMA_Init+0x3c>)
{
 80030e6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030e8:	695a      	ldr	r2, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80030ea:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030ec:	f042 0201 	orr.w	r2, r2, #1
 80030f0:	615a      	str	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030f4:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80030f6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003100:	f7fd fd24 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003104:	2010      	movs	r0, #16
 8003106:	f7fd fd55 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800310a:	2200      	movs	r2, #0
 800310c:	2011      	movs	r0, #17
 800310e:	4611      	mov	r1, r2
 8003110:	f7fd fd1c 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003114:	2011      	movs	r0, #17
 8003116:	f7fd fd4d 	bl	8000bb4 <HAL_NVIC_EnableIRQ>

}
 800311a:	b003      	add	sp, #12
 800311c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003120:	40021000 	.word	0x40021000

08003124 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	2210      	movs	r2, #16
{
 8003126:	b530      	push	{r4, r5, lr}
 8003128:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312a:	eb0d 0002 	add.w	r0, sp, r2
 800312e:	2100      	movs	r1, #0
 8003130:	f000 fa9a 	bl	8003668 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003136:	4d26      	ldr	r5, [pc, #152]	; (80031d0 <MX_GPIO_Init+0xac>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003138:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800313a:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800313c:	f042 0210 	orr.w	r2, r2, #16
 8003140:	619a      	str	r2, [r3, #24]
 8003142:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003144:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003146:	f002 0210 	and.w	r2, r2, #16
 800314a:	9200      	str	r2, [sp, #0]
 800314c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800314e:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003152:	f042 0220 	orr.w	r2, r2, #32
 8003156:	619a      	str	r2, [r3, #24]
 8003158:	699a      	ldr	r2, [r3, #24]
 800315a:	f002 0220 	and.w	r2, r2, #32
 800315e:	9201      	str	r2, [sp, #4]
 8003160:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	f042 0204 	orr.w	r2, r2, #4
 8003168:	619a      	str	r2, [r3, #24]
 800316a:	699a      	ldr	r2, [r3, #24]
 800316c:	f002 0204 	and.w	r2, r2, #4
 8003170:	9202      	str	r2, [sp, #8]
 8003172:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	f042 0208 	orr.w	r2, r2, #8
 800317a:	619a      	str	r2, [r3, #24]
 800317c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800317e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	9303      	str	r3, [sp, #12]
 8003186:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003188:	f7fd ff22 	bl	8000fd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 800318c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003190:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <MX_GPIO_Init+0xb0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003194:	a904      	add	r1, sp, #16
 8003196:	4810      	ldr	r0, [pc, #64]	; (80031d8 <MX_GPIO_Init+0xb4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003198:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800319c:	f7fd fe38 	bl	8000e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80031a0:	2320      	movs	r3, #32
 80031a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a4:	2301      	movs	r3, #1
 80031a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2302      	movs	r3, #2
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031aa:	a904      	add	r1, sp, #16
 80031ac:	4628      	mov	r0, r5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f7fd fe2d 	bl	8000e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80031b6:	4622      	mov	r2, r4
 80031b8:	4621      	mov	r1, r4
 80031ba:	2028      	movs	r0, #40	; 0x28
 80031bc:	f7fd fcc6 	bl	8000b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80031c0:	2028      	movs	r0, #40	; 0x28
 80031c2:	f7fd fcf7 	bl	8000bb4 <HAL_NVIC_EnableIRQ>

}
 80031c6:	b009      	add	sp, #36	; 0x24
 80031c8:	bd30      	pop	{r4, r5, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010800 	.word	0x40010800
 80031d4:	10110000 	.word	0x10110000
 80031d8:	40011000 	.word	0x40011000

080031dc <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031dc:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 80031de:	480c      	ldr	r0, [pc, #48]	; (8003210 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 80031e0:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <MX_I2C1_Init+0x38>)
 80031e2:	f8df e034 	ldr.w	lr, [pc, #52]	; 8003218 <MX_I2C1_Init+0x3c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 80031ea:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031ee:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80031f0:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80031f4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80031f6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80031f8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80031fa:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80031fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80031fe:	f7fe f8c3 	bl	8001388 <HAL_I2C_Init>
 8003202:	b118      	cbz	r0, 800320c <MX_I2C1_Init+0x30>
  {
    Error_Handler();
  }

}
 8003204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003208:	f000 b8e0 	b.w	80033cc <Error_Handler>
 800320c:	bd08      	pop	{r3, pc}
 800320e:	bf00      	nop
 8003210:	200000a8 	.word	0x200000a8
 8003214:	40005400 	.word	0x40005400
 8003218:	000186a0 	.word	0x000186a0

0800321c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800321c:	b530      	push	{r4, r5, lr}
 800321e:	4605      	mov	r5, r0
 8003220:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003222:	2210      	movs	r2, #16
 8003224:	2100      	movs	r1, #0
 8003226:	a802      	add	r0, sp, #8
 8003228:	f000 fa1e 	bl	8003668 <memset>
  if(i2cHandle->Instance==I2C1)
 800322c:	682a      	ldr	r2, [r5, #0]
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_I2C_MspInit+0xc8>)
 8003230:	429a      	cmp	r2, r3
 8003232:	d155      	bne.n	80032e0 <HAL_I2C_MspInit+0xc4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003234:	4c2c      	ldr	r4, [pc, #176]	; (80032e8 <HAL_I2C_MspInit+0xcc>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003236:	482d      	ldr	r0, [pc, #180]	; (80032ec <HAL_I2C_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003238:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323c:	f043 0308 	orr.w	r3, r3, #8
 8003240:	61a3      	str	r3, [r4, #24]
 8003242:	69a3      	ldr	r3, [r4, #24]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800324c:	23c0      	movs	r3, #192	; 0xc0
 800324e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003250:	2312      	movs	r3, #18
 8003252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f7fd fdda 	bl	8000e10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800325c:	69e3      	ldr	r3, [r4, #28]
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800325e:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003260:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003264:	61e3      	str	r3, [r4, #28]
 8003266:	69e3      	ldr	r3, [r4, #28]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003268:	4c21      	ldr	r4, [pc, #132]	; (80032f0 <HAL_I2C_MspInit+0xd4>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800326a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326e:	9301      	str	r3, [sp, #4]
 8003270:	9b01      	ldr	r3, [sp, #4]
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <HAL_I2C_MspInit+0xd8>)
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003274:	4620      	mov	r0, r4
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003276:	6023      	str	r3, [r4, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003278:	2300      	movs	r3, #0
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800327a:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800327c:	6063      	str	r3, [r4, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800327e:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003280:	6123      	str	r3, [r4, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003282:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003284:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003286:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003288:	f7fd fcb6 	bl	8000bf8 <HAL_DMA_Init>
 800328c:	b108      	cbz	r0, 8003292 <HAL_I2C_MspInit+0x76>
    {
      Error_Handler();
 800328e:	f000 f89d 	bl	80033cc <Error_Handler>

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003292:	2310      	movs	r3, #16
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_I2C_MspInit+0xdc>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003296:	63ac      	str	r4, [r5, #56]	; 0x38
 8003298:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800329a:	4c18      	ldr	r4, [pc, #96]	; (80032fc <HAL_I2C_MspInit+0xe0>)
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329c:	e884 000c 	stmia.w	r4, {r2, r3}
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	2300      	movs	r3, #0
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a2:	2280      	movs	r2, #128	; 0x80
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80032a4:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a6:	60a3      	str	r3, [r4, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a8:	60e2      	str	r2, [r4, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032aa:	6123      	str	r3, [r4, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ac:	6163      	str	r3, [r4, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80032ae:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032b0:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80032b2:	f7fd fca1 	bl	8000bf8 <HAL_DMA_Init>
 80032b6:	b108      	cbz	r0, 80032bc <HAL_I2C_MspInit+0xa0>
    {
      Error_Handler();
 80032b8:	f000 f888 	bl	80033cc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032bc:	2200      	movs	r2, #0
 80032be:	201f      	movs	r0, #31
 80032c0:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80032c2:	636c      	str	r4, [r5, #52]	; 0x34
 80032c4:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032c6:	f7fd fc41 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032ca:	201f      	movs	r0, #31
 80032cc:	f7fd fc72 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032d0:	2200      	movs	r2, #0
 80032d2:	2020      	movs	r0, #32
 80032d4:	4611      	mov	r1, r2
 80032d6:	f7fd fc39 	bl	8000b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032da:	2020      	movs	r0, #32
 80032dc:	f7fd fc6a 	bl	8000bb4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80032e0:	b007      	add	sp, #28
 80032e2:	bd30      	pop	{r4, r5, pc}
 80032e4:	40005400 	.word	0x40005400
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010c00 	.word	0x40010c00
 80032f0:	200000fc 	.word	0x200000fc
 80032f4:	40020080 	.word	0x40020080
 80032f8:	4002006c 	.word	0x4002006c
 80032fc:	20000064 	.word	0x20000064

08003300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003300:	b510      	push	{r4, lr}
 8003302:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003304:	2228      	movs	r2, #40	; 0x28
 8003306:	2100      	movs	r1, #0
 8003308:	a806      	add	r0, sp, #24
 800330a:	f000 f9ad 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800330e:	2214      	movs	r2, #20
 8003310:	2100      	movs	r1, #0
 8003312:	a801      	add	r0, sp, #4
 8003314:	f000 f9a8 	bl	8003668 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003318:	2301      	movs	r3, #1
 800331a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800331c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800331e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003320:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003322:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003326:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003328:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800332a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800332c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332e:	f7fe ff2d 	bl	800218c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003332:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003334:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003338:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800333a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800333c:	4621      	mov	r1, r4
 800333e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003340:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003342:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003344:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003346:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003348:	f7ff f8e8 	bl	800251c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800334c:	b010      	add	sp, #64	; 0x40
 800334e:	bd10      	pop	{r4, pc}

08003350 <main>:
{
 8003350:	b583      	push	{r0, r1, r7, lr}
  HAL_Init();
 8003352:	f7fd fbb3 	bl	8000abc <HAL_Init>
  SystemClock_Config();
 8003356:	f7ff ffd3 	bl	8003300 <SystemClock_Config>
  MX_GPIO_Init();
 800335a:	f7ff fee3 	bl	8003124 <MX_GPIO_Init>
  MX_DMA_Init();
 800335e:	f7ff fec1 	bl	80030e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003362:	f7ff ff3b 	bl	80031dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8003366:	f000 f8e9 	bl	800353c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800336a:	f000 f89f 	bl	80034ac <MX_TIM3_Init>
  HAL_TIM_Base_Start(&htim3);
 800336e:	4811      	ldr	r0, [pc, #68]	; (80033b4 <main+0x64>)
 8003370:	f7ff f9a6 	bl	80026c0 <HAL_TIM_Base_Start>
  test=5;
 8003374:	2305      	movs	r3, #5
 8003376:	4c10      	ldr	r4, [pc, #64]	; (80033b8 <main+0x68>)
  BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER, BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
 8003378:	2201      	movs	r2, #1
  test=5;
 800337a:	6023      	str	r3, [r4, #0]
  BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER, BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
 800337c:	2303      	movs	r3, #3
 800337e:	4611      	mov	r1, r2
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	480e      	ldr	r0, [pc, #56]	; (80033bc <main+0x6c>)
 8003384:	f7ff fc1e 	bl	8002bc4 <BME280_Init>
  test=10;
 8003388:	230a      	movs	r3, #10
  BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 800338a:	2100      	movs	r1, #0
 800338c:	2006      	movs	r0, #6
  test=10;
 800338e:	6023      	str	r3, [r4, #0]
  BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8003390:	f7ff fc0d 	bl	8002bae <BME280_SetConfig>
	  	BME280_ReadTemperatureAndPressureAndHuminidity(&temperature, &pressure, &huminidity);
 8003394:	4f0a      	ldr	r7, [pc, #40]	; (80033c0 <main+0x70>)
 8003396:	4e0b      	ldr	r6, [pc, #44]	; (80033c4 <main+0x74>)
 8003398:	4d0b      	ldr	r5, [pc, #44]	; (80033c8 <main+0x78>)
 800339a:	463a      	mov	r2, r7
 800339c:	4631      	mov	r1, r6
 800339e:	4628      	mov	r0, r5
 80033a0:	f7ff fd5c 	bl	8002e5c <BME280_ReadTemperatureAndPressureAndHuminidity>
	  	HAL_Delay(2000);
 80033a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80033a8:	f7fd fbac 	bl	8000b04 <HAL_Delay>
	  	test=19;
 80033ac:	2313      	movs	r3, #19
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	e7f3      	b.n	800339a <main+0x4a>
 80033b2:	bf00      	nop
 80033b4:	20000254 	.word	0x20000254
 80033b8:	2000014c 	.word	0x2000014c
 80033bc:	200000a8 	.word	0x200000a8
 80033c0:	20000144 	.word	0x20000144
 80033c4:	20000148 	.word	0x20000148
 80033c8:	20000140 	.word	0x20000140

080033cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <HAL_MspInit+0x3c>)
{
 80033d2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	619a      	str	r2, [r3, #24]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	f002 0201 	and.w	r2, r2, #1
 80033e2:	9200      	str	r2, [sp, #0]
 80033e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80033ec:	61da      	str	r2, [r3, #28]
 80033ee:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033f0:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033fa:	6853      	ldr	r3, [r2, #4]
 80033fc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003400:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003406:	b002      	add	sp, #8
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	40010000 	.word	0x40010000

08003414 <NMI_Handler>:
 8003414:	4770      	bx	lr

08003416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003416:	e7fe      	b.n	8003416 <HardFault_Handler>

08003418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003418:	e7fe      	b.n	8003418 <MemManage_Handler>

0800341a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800341a:	e7fe      	b.n	800341a <BusFault_Handler>

0800341c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800341c:	e7fe      	b.n	800341c <UsageFault_Handler>

0800341e <SVC_Handler>:
 800341e:	4770      	bx	lr

08003420 <DebugMon_Handler>:
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	4770      	bx	lr

08003424 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003424:	f7fd bb5c 	b.w	8000ae0 <HAL_IncTick>

08003428 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003428:	4801      	ldr	r0, [pc, #4]	; (8003430 <DMA1_Channel6_IRQHandler+0x8>)
 800342a:	f7fd bc5d 	b.w	8000ce8 <HAL_DMA_IRQHandler>
 800342e:	bf00      	nop
 8003430:	20000064 	.word	0x20000064

08003434 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003434:	4801      	ldr	r0, [pc, #4]	; (800343c <DMA1_Channel7_IRQHandler+0x8>)
 8003436:	f7fd bc57 	b.w	8000ce8 <HAL_DMA_IRQHandler>
 800343a:	bf00      	nop
 800343c:	200000fc 	.word	0x200000fc

08003440 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <I2C1_EV_IRQHandler+0x8>)
 8003442:	f7fe ba75 	b.w	8001930 <HAL_I2C_EV_IRQHandler>
 8003446:	bf00      	nop
 8003448:	200000a8 	.word	0x200000a8

0800344c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <I2C1_ER_IRQHandler+0x8>)
 800344e:	f7fe bdd9 	b.w	8002004 <HAL_I2C_ER_IRQHandler>
 8003452:	bf00      	nop
 8003454:	200000a8 	.word	0x200000a8

08003458 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003458:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800345c:	f7fd bdbe 	b.w	8000fdc <HAL_GPIO_EXTI_IRQHandler>

08003460 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <SystemInit+0x40>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <SystemInit+0x44>)
 800346e:	400a      	ands	r2, r1
 8003470:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003478:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800347c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003484:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800348c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800348e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003492:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003494:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <SystemInit+0x48>)
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	f8ff0000 	.word	0xf8ff0000
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ae:	2210      	movs	r2, #16
 80034b0:	2100      	movs	r1, #0
 80034b2:	a802      	add	r0, sp, #8
 80034b4:	f000 f8d8 	bl	8003668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 63;
 80034b8:	223f      	movs	r2, #63	; 0x3f
  htim3.Instance = TIM3;
 80034ba:	4814      	ldr	r0, [pc, #80]	; (800350c <MX_TIM3_Init+0x60>)
  htim3.Init.Prescaler = 63;
 80034bc:	4914      	ldr	r1, [pc, #80]	; (8003510 <MX_TIM3_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034be:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 63;
 80034c0:	e880 0006 	stmia.w	r0, {r1, r2}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 0xFFFF;
 80034c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	9301      	str	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034cc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0xFFFF;
 80034ce:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034d0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034d4:	f7ff f9f2 	bl	80028bc <HAL_TIM_Base_Init>
 80034d8:	b108      	cbz	r0, 80034de <MX_TIM3_Init+0x32>
  {
    Error_Handler();
 80034da:	f7ff ff77 	bl	80033cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034e2:	a902      	add	r1, sp, #8
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <MX_TIM3_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034e6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034e8:	f7ff f8f7 	bl	80026da <HAL_TIM_ConfigClockSource>
 80034ec:	b108      	cbz	r0, 80034f2 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 80034ee:	f7ff ff6d 	bl	80033cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034f4:	4669      	mov	r1, sp
 80034f6:	4805      	ldr	r0, [pc, #20]	; (800350c <MX_TIM3_Init+0x60>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f8:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fa:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034fc:	f7ff f9f8 	bl	80028f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003500:	b108      	cbz	r0, 8003506 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8003502:	f7ff ff63 	bl	80033cc <Error_Handler>
  }

}
 8003506:	b007      	add	sp, #28
 8003508:	f85d fb04 	ldr.w	pc, [sp], #4
 800350c:	20000254 	.word	0x20000254
 8003510:	40000400 	.word	0x40000400

08003514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8003514:	6802      	ldr	r2, [r0, #0]
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_TIM_Base_MspInit+0x24>)
{
 8003518:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 800351a:	429a      	cmp	r2, r3
 800351c:	d10a      	bne.n	8003534 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800351e:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	f042 0202 	orr.w	r2, r2, #2
 8003528:	61da      	str	r2, [r3, #28]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003534:	b002      	add	sp, #8
 8003536:	4770      	bx	lr
 8003538:	40000400 	.word	0x40000400

0800353c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800353c:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 800353e:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
  huart2.Instance = USART2;
 8003542:	480a      	ldr	r0, [pc, #40]	; (800356c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003546:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 9600;
 8003548:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800354c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 800354e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003550:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003552:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003554:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003556:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003558:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800355a:	f7ff fa89 	bl	8002a70 <HAL_UART_Init>
 800355e:	b118      	cbz	r0, 8003568 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8003560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003564:	f7ff bf32 	b.w	80033cc <Error_Handler>
 8003568:	bd08      	pop	{r3, pc}
 800356a:	bf00      	nop
 800356c:	20000294 	.word	0x20000294
 8003570:	40004400 	.word	0x40004400

08003574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003574:	b510      	push	{r4, lr}
 8003576:	4604      	mov	r4, r0
 8003578:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357a:	2210      	movs	r2, #16
 800357c:	2100      	movs	r1, #0
 800357e:	a802      	add	r0, sp, #8
 8003580:	f000 f872 	bl	8003668 <memset>
  if(uartHandle->Instance==USART2)
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	4b11      	ldr	r3, [pc, #68]	; (80035cc <HAL_UART_MspInit+0x58>)
 8003588:	429a      	cmp	r2, r3
 800358a:	d11c      	bne.n	80035c6 <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800358c:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8003590:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003592:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8003594:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003598:	61da      	str	r2, [r3, #28]
 800359a:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	480c      	ldr	r0, [pc, #48]	; (80035d0 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800359e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80035a2:	9200      	str	r2, [sp, #0]
 80035a4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	f042 0204 	orr.w	r2, r2, #4
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035b8:	230c      	movs	r3, #12
 80035ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	f7fd fc25 	bl	8000e10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035c6:	b006      	add	sp, #24
 80035c8:	bd10      	pop	{r4, pc}
 80035ca:	bf00      	nop
 80035cc:	40004400 	.word	0x40004400
 80035d0:	40010800 	.word	0x40010800

080035d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80035d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80035d6:	e003      	b.n	80035e0 <LoopCopyDataInit>

080035d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80035da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80035dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80035de:	3104      	adds	r1, #4

080035e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80035e0:	480a      	ldr	r0, [pc, #40]	; (800360c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80035e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80035e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80035e8:	d3f6      	bcc.n	80035d8 <CopyDataInit>
  ldr r2, =_sbss
 80035ea:	4a0a      	ldr	r2, [pc, #40]	; (8003614 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80035ec:	e002      	b.n	80035f4 <LoopFillZerobss>

080035ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80035f0:	f842 3b04 	str.w	r3, [r2], #4

080035f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80035f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80035f8:	d3f9      	bcc.n	80035ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035fa:	f7ff ff31 	bl	8003460 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035fe:	f000 f80f 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003602:	f7ff fea5 	bl	8003350 <main>
  bx lr
 8003606:	4770      	bx	lr
  ldr r3, =_sidata
 8003608:	080036c8 	.word	0x080036c8
  ldr r0, =_sdata
 800360c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003610:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8003614:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8003618:	200002d4 	.word	0x200002d4

0800361c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800361c:	e7fe      	b.n	800361c <ADC1_2_IRQHandler>
	...

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	2500      	movs	r5, #0
 8003624:	4e0c      	ldr	r6, [pc, #48]	; (8003658 <__libc_init_array+0x38>)
 8003626:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003628:	1ba4      	subs	r4, r4, r6
 800362a:	10a4      	asrs	r4, r4, #2
 800362c:	42a5      	cmp	r5, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	f000 f822 	bl	8003678 <_init>
 8003634:	2500      	movs	r5, #0
 8003636:	4e0a      	ldr	r6, [pc, #40]	; (8003660 <__libc_init_array+0x40>)
 8003638:	4c0a      	ldr	r4, [pc, #40]	; (8003664 <__libc_init_array+0x44>)
 800363a:	1ba4      	subs	r4, r4, r6
 800363c:	10a4      	asrs	r4, r4, #2
 800363e:	42a5      	cmp	r5, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003648:	4798      	blx	r3
 800364a:	3501      	adds	r5, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003652:	4798      	blx	r3
 8003654:	3501      	adds	r5, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036c0 	.word	0x080036c0
 800365c:	080036c0 	.word	0x080036c0
 8003660:	080036c0 	.word	0x080036c0
 8003664:	080036c4 	.word	0x080036c4

08003668 <memset>:
 8003668:	4603      	mov	r3, r0
 800366a:	4402      	add	r2, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <_init>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr

08003684 <_fini>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr
